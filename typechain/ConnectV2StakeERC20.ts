/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2StakeERC20Interface extends utils.Interface {
  functions: {
    "claimReward(string,uint256)": FunctionFragment;
    "deposit(string,uint256,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "withdraw(string,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogClaimedReward(address,bytes32,uint256,uint256)": EventFragment;
    "LogDeposit(address,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawAndClaimedReward(address,bytes32,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LogWithdrawAndClaimedReward"
  ): EventFragment;
}

export type LogClaimedRewardEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    rewardToken: string;
    stakingType: string;
    rewardAmt: BigNumber;
    setId: BigNumber;
  }
>;

export type LogClaimedRewardEventFilter =
  TypedEventFilter<LogClaimedRewardEvent>;

export type LogDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    stakingToken: string;
    stakingType: string;
    amount: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export type LogWithdrawAndClaimedRewardEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    stakingToken: string;
    stakingType: string;
    amount: BigNumber;
    rewardAmt: BigNumber;
    getId: BigNumber;
    setIdAmount: BigNumber;
    setIdReward: BigNumber;
  }
>;

export type LogWithdrawAndClaimedRewardEventFilter =
  TypedEventFilter<LogWithdrawAndClaimedRewardEvent>;

export interface ConnectV2StakeERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2StakeERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimReward(
      stakingPoolName: string,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setIdAmount: BigNumberish,
      setIdReward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimReward(
    stakingPoolName: string,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    stakingPoolName: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  withdraw(
    stakingPoolName: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setIdAmount: BigNumberish,
    setIdReward: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimReward(
      stakingPoolName: string,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    deposit(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    withdraw(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setIdAmount: BigNumberish,
      setIdReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogClaimedReward(address,bytes32,uint256,uint256)"(
      rewardToken?: string | null,
      stakingType?: BytesLike | null,
      rewardAmt?: null,
      setId?: null
    ): LogClaimedRewardEventFilter;
    LogClaimedReward(
      rewardToken?: string | null,
      stakingType?: BytesLike | null,
      rewardAmt?: null,
      setId?: null
    ): LogClaimedRewardEventFilter;

    "LogDeposit(address,bytes32,uint256,uint256,uint256)"(
      stakingToken?: string | null,
      stakingType?: BytesLike | null,
      amount?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;
    LogDeposit(
      stakingToken?: string | null,
      stakingType?: BytesLike | null,
      amount?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;

    "LogWithdrawAndClaimedReward(address,bytes32,uint256,uint256,uint256,uint256,uint256)"(
      stakingToken?: string | null,
      stakingType?: BytesLike | null,
      amount?: null,
      rewardAmt?: null,
      getId?: null,
      setIdAmount?: null,
      setIdReward?: null
    ): LogWithdrawAndClaimedRewardEventFilter;
    LogWithdrawAndClaimedReward(
      stakingToken?: string | null,
      stakingType?: BytesLike | null,
      amount?: null,
      rewardAmt?: null,
      getId?: null,
      setIdAmount?: null,
      setIdReward?: null
    ): LogWithdrawAndClaimedRewardEventFilter;
  };

  estimateGas: {
    claimReward(
      stakingPoolName: string,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setIdAmount: BigNumberish,
      setIdReward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimReward(
      stakingPoolName: string,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      stakingPoolName: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setIdAmount: BigNumberish,
      setIdReward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
