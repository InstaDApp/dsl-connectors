/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaReflexerGebMappingInterface extends utils.Interface {
  functions: {
    "addCollateralJoinMapping(address[])": FunctionFragment;
    "collateralJoinMapping(bytes32)": FunctionFragment;
    "connectors()": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "mappingController()": FunctionFragment;
    "name()": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCollateralJoinMapping",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralJoinMapping",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mappingController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCollateralJoinMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralJoinMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mappingController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "LogAddCollateralJoinMapping(address[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "LogAddCollateralJoinMapping"
  ): EventFragment;
}

export type LogAddCollateralJoinMappingEvent = TypedEvent<
  [string[]],
  { collateralJoin: string[] }
>;

export type LogAddCollateralJoinMappingEventFilter =
  TypedEventFilter<LogAddCollateralJoinMappingEvent>;

export interface InstaReflexerGebMapping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaReflexerGebMappingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateralJoinMapping(
      collateralJoins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralJoinMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    connectors(overrides?: CallOverrides): Promise<[string]>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    mappingController(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addCollateralJoinMapping(
    collateralJoins: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralJoinMapping(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  connectors(overrides?: CallOverrides): Promise<string>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  mappingController(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addCollateralJoinMapping(
      collateralJoins: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    collateralJoinMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    connectors(overrides?: CallOverrides): Promise<string>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    mappingController(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogAddCollateralJoinMapping(address[])"(
      collateralJoin?: null
    ): LogAddCollateralJoinMappingEventFilter;
    LogAddCollateralJoinMapping(
      collateralJoin?: null
    ): LogAddCollateralJoinMappingEventFilter;
  };

  estimateGas: {
    addCollateralJoinMapping(
      collateralJoins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralJoinMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    connectors(overrides?: CallOverrides): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    mappingController(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateralJoinMapping(
      collateralJoins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralJoinMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    connectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mappingController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
