/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2UniswapV3StakerInterface extends utils.Interface {
  functions: {
    "claimRewards(address,uint256)": FunctionFragment;
    "createIncentive(address,uint256,address,address,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositAndStake(address,uint256,uint256,address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "stake(address,uint256,uint256,address,uint256)": FunctionFragment;
    "transferDeposit(uint256,address)": FunctionFragment;
    "unstake(address,uint256,uint256,address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createIncentive",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStake",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDeposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogDeposit(uint256)": EventFragment;
    "LogDepositAndStake(uint256,bytes32)": EventFragment;
    "LogDepositTransfer(uint256,address)": EventFragment;
    "LogIncentiveCreated(bytes32,address,address,uint256,uint256,uint256)": EventFragment;
    "LogRewardClaimed(address,uint256)": EventFragment;
    "LogStake(uint256,bytes32)": EventFragment;
    "LogUnstake(uint256,bytes32)": EventFragment;
    "LogWithdraw(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositAndStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogIncentiveCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
}

export type LogDepositEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export type LogDepositAndStakeEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; incentiveId: string }
>;

export type LogDepositAndStakeEventFilter =
  TypedEventFilter<LogDepositAndStakeEvent>;

export type LogDepositTransferEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; to: string }
>;

export type LogDepositTransferEventFilter =
  TypedEventFilter<LogDepositTransferEvent>;

export type LogIncentiveCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    incentiveId: string;
    poolAddr: string;
    refundee: string;
    startTime: BigNumber;
    endTime: BigNumber;
    reward: BigNumber;
  }
>;

export type LogIncentiveCreatedEventFilter =
  TypedEventFilter<LogIncentiveCreatedEvent>;

export type LogRewardClaimedEvent = TypedEvent<
  [string, BigNumber],
  { rewardToken: string; amount: BigNumber }
>;

export type LogRewardClaimedEventFilter =
  TypedEventFilter<LogRewardClaimedEvent>;

export type LogStakeEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; incentiveId: string }
>;

export type LogStakeEventFilter = TypedEventFilter<LogStakeEvent>;

export type LogUnstakeEvent = TypedEvent<
  [BigNumber, string],
  { tokenId: BigNumber; incentiveId: string }
>;

export type LogUnstakeEventFilter = TypedEventFilter<LogUnstakeEvent>;

export type LogWithdrawEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface ConnectV2UniswapV3Staker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2UniswapV3StakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createIncentive(
      _rewardToken: string,
      _length: BigNumberish,
      _refundee: string,
      _poolAddr: string,
      _reward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndStake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    stake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferDeposit(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    _rewardToken: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createIncentive(
    _rewardToken: string,
    _length: BigNumberish,
    _refundee: string,
    _poolAddr: string,
    _reward: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndStake(
    _rewardToken: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _refundee: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  stake(
    _rewardToken: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _refundee: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferDeposit(
    _tokenId: BigNumberish,
    _to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _rewardToken: string,
    _startTime: BigNumberish,
    _endTime: BigNumberish,
    _refundee: string,
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    createIncentive(
      _rewardToken: string,
      _length: BigNumberish,
      _refundee: string,
      _poolAddr: string,
      _reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    deposit(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    depositAndStake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    stake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    transferDeposit(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    unstake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    withdraw(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogDeposit(uint256)"(tokenId?: null): LogDepositEventFilter;
    LogDeposit(tokenId?: null): LogDepositEventFilter;

    "LogDepositAndStake(uint256,bytes32)"(
      tokenId?: null,
      incentiveId?: null
    ): LogDepositAndStakeEventFilter;
    LogDepositAndStake(
      tokenId?: null,
      incentiveId?: null
    ): LogDepositAndStakeEventFilter;

    "LogDepositTransfer(uint256,address)"(
      tokenId?: BigNumberish | null,
      to?: null
    ): LogDepositTransferEventFilter;
    LogDepositTransfer(
      tokenId?: BigNumberish | null,
      to?: null
    ): LogDepositTransferEventFilter;

    "LogIncentiveCreated(bytes32,address,address,uint256,uint256,uint256)"(
      incentiveId?: null,
      poolAddr?: null,
      refundee?: null,
      startTime?: null,
      endTime?: null,
      reward?: null
    ): LogIncentiveCreatedEventFilter;
    LogIncentiveCreated(
      incentiveId?: null,
      poolAddr?: null,
      refundee?: null,
      startTime?: null,
      endTime?: null,
      reward?: null
    ): LogIncentiveCreatedEventFilter;

    "LogRewardClaimed(address,uint256)"(
      rewardToken?: string | null,
      amount?: null
    ): LogRewardClaimedEventFilter;
    LogRewardClaimed(
      rewardToken?: string | null,
      amount?: null
    ): LogRewardClaimedEventFilter;

    "LogStake(uint256,bytes32)"(
      tokenId?: BigNumberish | null,
      incentiveId?: null
    ): LogStakeEventFilter;
    LogStake(
      tokenId?: BigNumberish | null,
      incentiveId?: null
    ): LogStakeEventFilter;

    "LogUnstake(uint256,bytes32)"(
      tokenId?: BigNumberish | null,
      incentiveId?: null
    ): LogUnstakeEventFilter;
    LogUnstake(
      tokenId?: BigNumberish | null,
      incentiveId?: null
    ): LogUnstakeEventFilter;

    "LogWithdraw(uint256)"(
      tokenId?: BigNumberish | null
    ): LogWithdrawEventFilter;
    LogWithdraw(tokenId?: BigNumberish | null): LogWithdrawEventFilter;
  };

  estimateGas: {
    claimRewards(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createIncentive(
      _rewardToken: string,
      _length: BigNumberish,
      _refundee: string,
      _poolAddr: string,
      _reward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndStake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferDeposit(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createIncentive(
      _rewardToken: string,
      _length: BigNumberish,
      _refundee: string,
      _poolAddr: string,
      _reward: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndStake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferDeposit(
      _tokenId: BigNumberish,
      _to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _rewardToken: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish,
      _refundee: string,
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
