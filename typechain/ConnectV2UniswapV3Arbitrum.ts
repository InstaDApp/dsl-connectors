/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2UniswapV3ArbitrumInterface extends utils.Interface {
  functions: {
    "burn(uint256)": FunctionFragment;
    "collect(uint256,uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256,uint256[],uint256)": FunctionFragment;
    "mint(address,address,uint24,int24,int24,uint256,uint256,uint256,uint256[],uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "withdraw(uint256,uint256,uint256,uint256,uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "collect",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogBurnPosition(uint256)": EventFragment;
    "LogCollect(uint256,uint256,uint256)": EventFragment;
    "LogDeposit(uint256,uint256,uint256,uint256)": EventFragment;
    "LogMint(uint256,uint256,uint256,uint256,int24,int24)": EventFragment;
    "LogWithdraw(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBurnPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCollect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
}

export type LogBurnPositionEvent = TypedEvent<
  [BigNumber],
  { tokenId: BigNumber }
>;

export type LogBurnPositionEventFilter = TypedEventFilter<LogBurnPositionEvent>;

export type LogCollectEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { tokenId: BigNumber; amountA: BigNumber; amountB: BigNumber }
>;

export type LogCollectEventFilter = TypedEventFilter<LogCollectEvent>;

export type LogDepositEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amountA: BigNumber;
    amountB: BigNumber;
  }
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export type LogMintEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, number, number],
  {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amtA: BigNumber;
    amtB: BigNumber;
    tickLower: number;
    tickUpper: number;
  }
>;

export type LogMintEventFilter = TypedEventFilter<LogMintEvent>;

export type LogWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    tokenId: BigNumber;
    liquidity: BigNumber;
    amountA: BigNumber;
    amountB: BigNumber;
  }
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface ConnectV2UniswapV3Arbitrum extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2UniswapV3ArbitrumInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    burn(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      tokenId: BigNumberish,
      amountA: BigNumberish,
      amountB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mint(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amtA: BigNumberish,
      amtB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  burn(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    tokenId: BigNumberish,
    amount0Max: BigNumberish,
    amount1Max: BigNumberish,
    getIds: BigNumberish[],
    setIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    tokenId: BigNumberish,
    amountA: BigNumberish,
    amountB: BigNumberish,
    slippage: BigNumberish,
    getIds: BigNumberish[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mint(
    tokenA: string,
    tokenB: string,
    fee: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    amtA: BigNumberish,
    amtB: BigNumberish,
    slippage: BigNumberish,
    getIds: BigNumberish[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  withdraw(
    tokenId: BigNumberish,
    liquidity: BigNumberish,
    amountAMin: BigNumberish,
    amountBMin: BigNumberish,
    getId: BigNumberish,
    setIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    burn(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    deposit(
      tokenId: BigNumberish,
      amountA: BigNumberish,
      amountB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    mint(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amtA: BigNumberish,
      amtB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    withdraw(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogBurnPosition(uint256)"(tokenId?: null): LogBurnPositionEventFilter;
    LogBurnPosition(tokenId?: null): LogBurnPositionEventFilter;

    "LogCollect(uint256,uint256,uint256)"(
      tokenId?: null,
      amountA?: null,
      amountB?: null
    ): LogCollectEventFilter;
    LogCollect(
      tokenId?: null,
      amountA?: null,
      amountB?: null
    ): LogCollectEventFilter;

    "LogDeposit(uint256,uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      liquidity?: null,
      amountA?: null,
      amountB?: null
    ): LogDepositEventFilter;
    LogDeposit(
      tokenId?: BigNumberish | null,
      liquidity?: null,
      amountA?: null,
      amountB?: null
    ): LogDepositEventFilter;

    "LogMint(uint256,uint256,uint256,uint256,int24,int24)"(
      tokenId?: BigNumberish | null,
      liquidity?: null,
      amtA?: null,
      amtB?: null,
      tickLower?: null,
      tickUpper?: null
    ): LogMintEventFilter;
    LogMint(
      tokenId?: BigNumberish | null,
      liquidity?: null,
      amtA?: null,
      amtB?: null,
      tickLower?: null,
      tickUpper?: null
    ): LogMintEventFilter;

    "LogWithdraw(uint256,uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      liquidity?: null,
      amountA?: null,
      amountB?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      tokenId?: BigNumberish | null,
      liquidity?: null,
      amountA?: null,
      amountB?: null
    ): LogWithdrawEventFilter;
  };

  estimateGas: {
    burn(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      tokenId: BigNumberish,
      amountA: BigNumberish,
      amountB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mint(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amtA: BigNumberish,
      amtB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burn(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      tokenId: BigNumberish,
      amount0Max: BigNumberish,
      amount1Max: BigNumberish,
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenId: BigNumberish,
      amountA: BigNumberish,
      amountB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amtA: BigNumberish,
      amtB: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      tokenId: BigNumberish,
      liquidity: BigNumberish,
      amountAMin: BigNumberish,
      amountBMin: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
