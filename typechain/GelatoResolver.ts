/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ProviderStruct = { addr: string; module: string };

export type ProviderStructOutput = [string, string] & {
  addr: string;
  module: string;
};

export type ConditionStruct = { inst: string; data: BytesLike };

export type ConditionStructOutput = [string, string] & {
  inst: string;
  data: string;
};

export type ActionStruct = {
  addr: string;
  data: BytesLike;
  operation: BigNumberish;
  dataFlow: BigNumberish;
  value: BigNumberish;
  termsOkCheck: boolean;
};

export type ActionStructOutput = [
  string,
  string,
  number,
  number,
  BigNumber,
  boolean
] & {
  addr: string;
  data: string;
  operation: number;
  dataFlow: number;
  value: BigNumber;
  termsOkCheck: boolean;
};

export type TaskStruct = {
  conditions: ConditionStruct[];
  actions: ActionStruct[];
  selfProviderGasLimit: BigNumberish;
  selfProviderGasPriceCeil: BigNumberish;
};

export type TaskStructOutput = [
  ConditionStructOutput[],
  ActionStructOutput[],
  BigNumber,
  BigNumber
] & {
  conditions: ConditionStructOutput[];
  actions: ActionStructOutput[];
  selfProviderGasLimit: BigNumber;
  selfProviderGasPriceCeil: BigNumber;
};

export type TaskReceiptStruct = {
  id: BigNumberish;
  userProxy: string;
  provider: ProviderStruct;
  index: BigNumberish;
  tasks: TaskStruct[];
  expiryDate: BigNumberish;
  cycleId: BigNumberish;
  submissionsLeft: BigNumberish;
};

export type TaskReceiptStructOutput = [
  BigNumber,
  string,
  ProviderStructOutput,
  BigNumber,
  TaskStructOutput[],
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  userProxy: string;
  provider: ProviderStructOutput;
  index: BigNumber;
  tasks: TaskStructOutput[];
  expiryDate: BigNumber;
  cycleId: BigNumber;
  submissionsLeft: BigNumber;
};

export type TaskSpecStruct = {
  conditions: string[];
  actions: ActionStruct[];
  gasPriceCeil: BigNumberish;
};

export type TaskSpecStructOutput = [
  string[],
  ActionStructOutput[],
  BigNumber
] & {
  conditions: string[];
  actions: ActionStructOutput[];
  gasPriceCeil: BigNumber;
};

export interface GelatoResolverInterface extends utils.Interface {
  functions: {
    "connectorID()": FunctionFragment;
    "multiCancelTasks((uint256,address,(address,address),uint256,((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256)[],uint256,uint256,uint256)[])": FunctionFragment;
    "multiProvide(address,(address[],(address,bytes,uint8,uint8,uint256,bool)[],uint256)[],address[],uint256,uint256,uint256)": FunctionFragment;
    "multiUnprovide(uint256,(address[],(address,bytes,uint8,uint8,uint256,bool)[],uint256)[],address[],uint256,uint256)": FunctionFragment;
    "submitTask((address,address),((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256),uint256)": FunctionFragment;
    "submitTaskChain((address,address),((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256)[],uint256,uint256)": FunctionFragment;
    "submitTaskCycle((address,address),((address,bytes)[],(address,bytes,uint8,uint8,uint256,bool)[],uint256,uint256)[],uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "connectorID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiCancelTasks",
    values: [TaskReceiptStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiProvide",
    values: [
      string,
      TaskSpecStruct[],
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiUnprovide",
    values: [
      BigNumberish,
      TaskSpecStruct[],
      string[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [ProviderStruct, TaskStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskChain",
    values: [ProviderStruct, TaskStruct[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTaskCycle",
    values: [ProviderStruct, TaskStruct[], BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "connectorID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiCancelTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiProvide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiUnprovide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTaskCycle",
    data: BytesLike
  ): Result;

  events: {
    "LogMultiCancelTasks(tuple[],uint256,uint256)": EventFragment;
    "LogMultiProvide(address,tuple[],address[],uint256,uint256,uint256)": EventFragment;
    "LogMultiUnprovide(tuple[],address[],uint256,uint256,uint256)": EventFragment;
    "LogSubmitTask(tuple,tuple,uint256,uint256,uint256)": EventFragment;
    "LogSubmitTaskChain(tuple,tuple[],uint256,uint256,uint256)": EventFragment;
    "LogSubmitTaskCycle(tuple,tuple[],uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogMultiCancelTasks"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMultiProvide"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMultiUnprovide"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSubmitTask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSubmitTaskChain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSubmitTaskCycle"): EventFragment;
}

export type LogMultiCancelTasksEvent = TypedEvent<
  [TaskReceiptStructOutput[], BigNumber, BigNumber],
  { taskReceipt: TaskReceiptStructOutput[]; getId: BigNumber; setId: BigNumber }
>;

export type LogMultiCancelTasksEventFilter =
  TypedEventFilter<LogMultiCancelTasksEvent>;

export type LogMultiProvideEvent = TypedEvent<
  [string, TaskSpecStructOutput[], string[], BigNumber, BigNumber, BigNumber],
  {
    executor: string;
    taskspecs: TaskSpecStructOutput[];
    modules: string[];
    ethToDeposit: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogMultiProvideEventFilter = TypedEventFilter<LogMultiProvideEvent>;

export type LogMultiUnprovideEvent = TypedEvent<
  [TaskSpecStructOutput[], string[], BigNumber, BigNumber, BigNumber],
  {
    taskspecs: TaskSpecStructOutput[];
    modules: string[];
    ethToWithdraw: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogMultiUnprovideEventFilter =
  TypedEventFilter<LogMultiUnprovideEvent>;

export type LogSubmitTaskEvent = TypedEvent<
  [ProviderStructOutput, TaskStructOutput, BigNumber, BigNumber, BigNumber],
  {
    provider: ProviderStructOutput;
    task: TaskStructOutput;
    expiryDate: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogSubmitTaskEventFilter = TypedEventFilter<LogSubmitTaskEvent>;

export type LogSubmitTaskChainEvent = TypedEvent<
  [ProviderStructOutput, TaskStructOutput[], BigNumber, BigNumber, BigNumber],
  {
    provider: ProviderStructOutput;
    tasks: TaskStructOutput[];
    expiryDate: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogSubmitTaskChainEventFilter =
  TypedEventFilter<LogSubmitTaskChainEvent>;

export type LogSubmitTaskCycleEvent = TypedEvent<
  [ProviderStructOutput, TaskStructOutput[], BigNumber, BigNumber, BigNumber],
  {
    provider: ProviderStructOutput;
    tasks: TaskStructOutput[];
    expiryDate: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogSubmitTaskCycleEventFilter =
  TypedEventFilter<LogSubmitTaskCycleEvent>;

export interface GelatoResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GelatoResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    multiCancelTasks(
      _taskReceipts: TaskReceiptStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiProvide(
      _executor: string,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      _provider: ProviderStruct,
      _task: TaskStruct,
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskChain(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTaskCycle(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  connectorID(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

  multiCancelTasks(
    _taskReceipts: TaskReceiptStruct[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiProvide(
    _executor: string,
    _taskSpecs: TaskSpecStruct[],
    _modules: string[],
    _ethToDeposit: BigNumberish,
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiUnprovide(
    _withdrawAmount: BigNumberish,
    _taskSpecs: TaskSpecStruct[],
    _modules: string[],
    _getId: BigNumberish,
    _setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    _provider: ProviderStruct,
    _task: TaskStruct,
    _expiryDate: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskChain(
    _provider: ProviderStruct,
    _tasks: TaskStruct[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTaskCycle(
    _provider: ProviderStruct,
    _tasks: TaskStruct[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    multiCancelTasks(
      _taskReceipts: TaskReceiptStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiProvide(
      _executor: string,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTask(
      _provider: ProviderStruct,
      _task: TaskStruct,
      _expiryDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskChain(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTaskCycle(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogMultiCancelTasks(tuple[],uint256,uint256)"(
      taskReceipt?: TaskReceiptStruct[] | null,
      getId?: null,
      setId?: null
    ): LogMultiCancelTasksEventFilter;
    LogMultiCancelTasks(
      taskReceipt?: TaskReceiptStruct[] | null,
      getId?: null,
      setId?: null
    ): LogMultiCancelTasksEventFilter;

    "LogMultiProvide(address,tuple[],address[],uint256,uint256,uint256)"(
      executor?: string | null,
      taskspecs?: TaskSpecStruct[] | null,
      modules?: string[] | null,
      ethToDeposit?: null,
      getId?: null,
      setId?: null
    ): LogMultiProvideEventFilter;
    LogMultiProvide(
      executor?: string | null,
      taskspecs?: TaskSpecStruct[] | null,
      modules?: string[] | null,
      ethToDeposit?: null,
      getId?: null,
      setId?: null
    ): LogMultiProvideEventFilter;

    "LogMultiUnprovide(tuple[],address[],uint256,uint256,uint256)"(
      taskspecs?: TaskSpecStruct[] | null,
      modules?: string[] | null,
      ethToWithdraw?: null,
      getId?: null,
      setId?: null
    ): LogMultiUnprovideEventFilter;
    LogMultiUnprovide(
      taskspecs?: TaskSpecStruct[] | null,
      modules?: string[] | null,
      ethToWithdraw?: null,
      getId?: null,
      setId?: null
    ): LogMultiUnprovideEventFilter;

    "LogSubmitTask(tuple,tuple,uint256,uint256,uint256)"(
      provider?: ProviderStruct | null,
      task?: TaskStruct | null,
      expiryDate?: BigNumberish | null,
      getId?: null,
      setId?: null
    ): LogSubmitTaskEventFilter;
    LogSubmitTask(
      provider?: ProviderStruct | null,
      task?: TaskStruct | null,
      expiryDate?: BigNumberish | null,
      getId?: null,
      setId?: null
    ): LogSubmitTaskEventFilter;

    "LogSubmitTaskChain(tuple,tuple[],uint256,uint256,uint256)"(
      provider?: ProviderStruct | null,
      tasks?: TaskStruct[] | null,
      expiryDate?: BigNumberish | null,
      getId?: null,
      setId?: null
    ): LogSubmitTaskChainEventFilter;
    LogSubmitTaskChain(
      provider?: ProviderStruct | null,
      tasks?: TaskStruct[] | null,
      expiryDate?: BigNumberish | null,
      getId?: null,
      setId?: null
    ): LogSubmitTaskChainEventFilter;

    "LogSubmitTaskCycle(tuple,tuple[],uint256,uint256,uint256)"(
      provider?: ProviderStruct | null,
      tasks?: TaskStruct[] | null,
      expiryDate?: BigNumberish | null,
      getId?: null,
      setId?: null
    ): LogSubmitTaskCycleEventFilter;
    LogSubmitTaskCycle(
      provider?: ProviderStruct | null,
      tasks?: TaskStruct[] | null,
      expiryDate?: BigNumberish | null,
      getId?: null,
      setId?: null
    ): LogSubmitTaskCycleEventFilter;
  };

  estimateGas: {
    connectorID(overrides?: CallOverrides): Promise<BigNumber>;

    multiCancelTasks(
      _taskReceipts: TaskReceiptStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiProvide(
      _executor: string,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTask(
      _provider: ProviderStruct,
      _task: TaskStruct,
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskChain(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTaskCycle(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiCancelTasks(
      _taskReceipts: TaskReceiptStruct[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiProvide(
      _executor: string,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _ethToDeposit: BigNumberish,
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: TaskSpecStruct[],
      _modules: string[],
      _getId: BigNumberish,
      _setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      _provider: ProviderStruct,
      _task: TaskStruct,
      _expiryDate: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskChain(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTaskCycle(
      _provider: ProviderStruct,
      _tasks: TaskStruct[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
