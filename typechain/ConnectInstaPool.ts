/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectInstaPoolInterface extends utils.Interface {
  functions: {
    "addFeeAmount(address,uint256,uint256,uint256)": FunctionFragment;
    "connectorID()": FunctionFragment;
    "deposit(address,uint256,uint256,uint256)": FunctionFragment;
    "flashBorrow(address,uint256,uint256,uint256)": FunctionFragment;
    "flashMultiBorrow(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "flashMultiPayback(address[],uint256[],uint256[])": FunctionFragment;
    "flashMultiPaybackOrigin(address,address[],uint256[],uint256[])": FunctionFragment;
    "flashPayback(address,uint256,uint256)": FunctionFragment;
    "flashPaybackOrigin(address,address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "withdraw(address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addFeeAmount",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectorID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashBorrow",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashMultiBorrow",
    values: [string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flashMultiPayback",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flashMultiPaybackOrigin",
    values: [string, string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flashPayback",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashPaybackOrigin",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashMultiBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashMultiPayback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashMultiPaybackOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashPayback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashPaybackOrigin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogDepositLiquidity(address,uint256,uint256,uint256)": EventFragment;
    "LogFlashBorrow(address,uint256,uint256,uint256)": EventFragment;
    "LogFlashPayback(address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogOriginFeeCollected(address,address,uint256,uint256)": EventFragment;
    "LogWithdrawLiquidity(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDepositLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFlashBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFlashPayback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOriginFeeCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawLiquidity"): EventFragment;
}

export type LogDepositLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { token: string; tokenAmt: BigNumber; getId: BigNumber; setId: BigNumber }
>;

export type LogDepositLiquidityEventFilter =
  TypedEventFilter<LogDepositLiquidityEvent>;

export type LogFlashBorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { token: string; tokenAmt: BigNumber; getId: BigNumber; setId: BigNumber }
>;

export type LogFlashBorrowEventFilter = TypedEventFilter<LogFlashBorrowEvent>;

export type LogFlashPaybackEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    tokenAmt: BigNumber;
    feeCollected: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogFlashPaybackEventFilter = TypedEventFilter<LogFlashPaybackEvent>;

export type LogOriginFeeCollectedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    origin: string;
    token: string;
    tokenAmt: BigNumber;
    originFeeAmt: BigNumber;
  }
>;

export type LogOriginFeeCollectedEventFilter =
  TypedEventFilter<LogOriginFeeCollectedEvent>;

export type LogWithdrawLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { token: string; tokenAmt: BigNumber; getId: BigNumber; setId: BigNumber }
>;

export type LogWithdrawLiquidityEventFilter =
  TypedEventFilter<LogWithdrawLiquidityEvent>;

export interface ConnectInstaPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectInstaPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addFeeAmount(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashBorrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashMultiBorrow(
      tokens: string[],
      amts: BigNumberish[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashMultiPayback(
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashMultiPaybackOrigin(
      origin: string,
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashPayback(
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashPaybackOrigin(
      origin: string,
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addFeeAmount(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectorID(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

  deposit(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashBorrow(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashMultiBorrow(
    tokens: string[],
    amts: BigNumberish[],
    getId: BigNumberish[],
    setId: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashMultiPayback(
    tokens: string[],
    getId: BigNumberish[],
    setId: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashMultiPaybackOrigin(
    origin: string,
    tokens: string[],
    getId: BigNumberish[],
    setId: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashPayback(
    token: string,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashPaybackOrigin(
    origin: string,
    token: string,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  withdraw(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addFeeAmount(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashBorrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashMultiBorrow(
      tokens: string[],
      amts: BigNumberish[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    flashMultiPayback(
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    flashMultiPaybackOrigin(
      origin: string,
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    flashPayback(
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashPaybackOrigin(
      origin: string,
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogDepositLiquidity(address,uint256,uint256,uint256)"(
      token?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositLiquidityEventFilter;
    LogDepositLiquidity(
      token?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositLiquidityEventFilter;

    "LogFlashBorrow(address,uint256,uint256,uint256)"(
      token?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogFlashBorrowEventFilter;
    LogFlashBorrow(
      token?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogFlashBorrowEventFilter;

    "LogFlashPayback(address,uint256,uint256,uint256,uint256)"(
      token?: string | null,
      tokenAmt?: null,
      feeCollected?: null,
      getId?: null,
      setId?: null
    ): LogFlashPaybackEventFilter;
    LogFlashPayback(
      token?: string | null,
      tokenAmt?: null,
      feeCollected?: null,
      getId?: null,
      setId?: null
    ): LogFlashPaybackEventFilter;

    "LogOriginFeeCollected(address,address,uint256,uint256)"(
      origin?: string | null,
      token?: string | null,
      tokenAmt?: null,
      originFeeAmt?: null
    ): LogOriginFeeCollectedEventFilter;
    LogOriginFeeCollected(
      origin?: string | null,
      token?: string | null,
      tokenAmt?: null,
      originFeeAmt?: null
    ): LogOriginFeeCollectedEventFilter;

    "LogWithdrawLiquidity(address,uint256,uint256,uint256)"(
      token?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawLiquidityEventFilter;
    LogWithdrawLiquidity(
      token?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawLiquidityEventFilter;
  };

  estimateGas: {
    addFeeAmount(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectorID(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashBorrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashMultiBorrow(
      tokens: string[],
      amts: BigNumberish[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashMultiPayback(
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashMultiPaybackOrigin(
      origin: string,
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashPayback(
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashPaybackOrigin(
      origin: string,
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFeeAmount(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashBorrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashMultiBorrow(
      tokens: string[],
      amts: BigNumberish[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashMultiPayback(
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashMultiPaybackOrigin(
      origin: string,
      tokens: string[],
      getId: BigNumberish[],
      setId: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashPayback(
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashPaybackOrigin(
      origin: string,
      token: string,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
