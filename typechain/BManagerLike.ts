/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BManagerLikeInterface extends utils.Interface {
  functions: {
    "cdpCan(address,uint256,address)": FunctionFragment;
    "cdpi()": FunctionFragment;
    "count(address)": FunctionFragment;
    "cushion(uint256)": FunctionFragment;
    "flux(uint256,address,uint256)": FunctionFragment;
    "frob(uint256,int256,int256)": FunctionFragment;
    "give(uint256,address)": FunctionFragment;
    "ilks(uint256)": FunctionFragment;
    "last(address)": FunctionFragment;
    "move(uint256,address,uint256)": FunctionFragment;
    "open(bytes32,address)": FunctionFragment;
    "owns(uint256)": FunctionFragment;
    "urns(uint256)": FunctionFragment;
    "vat()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cdpCan",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "cdpi", values?: undefined): string;
  encodeFunctionData(functionFragment: "count", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cushion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flux",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "frob",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "ilks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "last", values: [string]): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owns", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "urns", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "vat", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cdpCan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cdpi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cushion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flux", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "frob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ilks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "last", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "urns", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vat", data: BytesLike): Result;

  events: {};
}

export interface BManagerLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BManagerLikeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cdpi(overrides?: CallOverrides): Promise<[BigNumber]>;

    count(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cushion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flux(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    frob(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    give(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    last(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    move(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    vat(overrides?: CallOverrides): Promise<[string]>;
  };

  cdpCan(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cdpi(overrides?: CallOverrides): Promise<BigNumber>;

  count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cushion(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  flux(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  frob(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  give(
    arg0: BigNumberish,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  move(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  vat(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cdpi(overrides?: CallOverrides): Promise<BigNumber>;

    count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cushion(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    flux(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    frob(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    give(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    move(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    open(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    vat(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cdpi(overrides?: CallOverrides): Promise<BigNumber>;

    count(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cushion(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    flux(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    frob(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    give(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ilks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    last(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    move(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    urns(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    vat(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cdpCan(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cdpi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    count(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cushion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flux(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    frob(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    give(
      arg0: BigNumberish,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ilks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    last(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    move(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    urns(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vat(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
