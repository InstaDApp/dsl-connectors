/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GAaveProtectionPolygonConnectorInterface
  extends utils.Interface {
  functions: {
    "cancelAndRevoke()": FunctionFragment;
    "cancelProtection()": FunctionFragment;
    "name()": FunctionFragment;
    "submitProtection(uint256,uint256,bool)": FunctionFragment;
    "updateProtection(uint256,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelAndRevoke",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProtection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitProtection",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtection",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelAndRevoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtection",
    data: BytesLike
  ): Result;

  events: {
    "LogCancelAndRevoke(address,address)": EventFragment;
    "LogCancelProtection(address,address)": EventFragment;
    "LogSubmitProtection(address,address,uint256,uint256,bool)": EventFragment;
    "LogUpdateProtection(address,address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCancelAndRevoke"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCancelProtection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSubmitProtection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateProtection"): EventFragment;
}

export type LogCancelAndRevokeEvent = TypedEvent<
  [string, string],
  { dsa: string; action: string }
>;

export type LogCancelAndRevokeEventFilter =
  TypedEventFilter<LogCancelAndRevokeEvent>;

export type LogCancelProtectionEvent = TypedEvent<
  [string, string],
  { dsa: string; action: string }
>;

export type LogCancelProtectionEventFilter =
  TypedEventFilter<LogCancelProtectionEvent>;

export type LogSubmitProtectionEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, boolean],
  {
    dsa: string;
    action: string;
    wantedHealthFactor: BigNumber;
    minimumHealthFactor: BigNumber;
    isPermanent: boolean;
  }
>;

export type LogSubmitProtectionEventFilter =
  TypedEventFilter<LogSubmitProtectionEvent>;

export type LogUpdateProtectionEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, boolean],
  {
    dsa: string;
    action: string;
    wantedHealthFactor: BigNumber;
    minimumHealthFactor: BigNumber;
    isPermanent: boolean;
  }
>;

export type LogUpdateProtectionEventFilter =
  TypedEventFilter<LogUpdateProtectionEvent>;

export interface GAaveProtectionPolygonConnector extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GAaveProtectionPolygonConnectorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelAndRevoke(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelProtection(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    submitProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelAndRevoke(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelProtection(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  submitProtection(
    _wantedHealthFactor: BigNumberish,
    _minimumHealthFactor: BigNumberish,
    _isPermanent: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateProtection(
    _wantedHealthFactor: BigNumberish,
    _minimumHealthFactor: BigNumberish,
    _isPermanent: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelAndRevoke(overrides?: CallOverrides): Promise<void>;

    cancelProtection(overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    submitProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogCancelAndRevoke(address,address)"(
      dsa?: string | null,
      action?: string | null
    ): LogCancelAndRevokeEventFilter;
    LogCancelAndRevoke(
      dsa?: string | null,
      action?: string | null
    ): LogCancelAndRevokeEventFilter;

    "LogCancelProtection(address,address)"(
      dsa?: string | null,
      action?: string | null
    ): LogCancelProtectionEventFilter;
    LogCancelProtection(
      dsa?: string | null,
      action?: string | null
    ): LogCancelProtectionEventFilter;

    "LogSubmitProtection(address,address,uint256,uint256,bool)"(
      dsa?: string | null,
      action?: string | null,
      wantedHealthFactor?: null,
      minimumHealthFactor?: null,
      isPermanent?: null
    ): LogSubmitProtectionEventFilter;
    LogSubmitProtection(
      dsa?: string | null,
      action?: string | null,
      wantedHealthFactor?: null,
      minimumHealthFactor?: null,
      isPermanent?: null
    ): LogSubmitProtectionEventFilter;

    "LogUpdateProtection(address,address,uint256,uint256,bool)"(
      dsa?: string | null,
      action?: string | null,
      wantedHealthFactor?: null,
      minimumHealthFactor?: null,
      isPermanent?: null
    ): LogUpdateProtectionEventFilter;
    LogUpdateProtection(
      dsa?: string | null,
      action?: string | null,
      wantedHealthFactor?: null,
      minimumHealthFactor?: null,
      isPermanent?: null
    ): LogUpdateProtectionEventFilter;
  };

  estimateGas: {
    cancelAndRevoke(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelProtection(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    submitProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelAndRevoke(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelProtection(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateProtection(
      _wantedHealthFactor: BigNumberish,
      _minimumHealthFactor: BigNumberish,
      _isPermanent: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
