/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OneInchInteraceInterface extends utils.Interface {
  functions: {
    "swap(address,address,uint256,uint256,uint256,address,address[],bytes,uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "swap",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string[],
      BytesLike,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface OneInchInterace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OneInchInteraceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      fromToken: string,
      toToken: string,
      fromTokenAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      guaranteedAmount: BigNumberish,
      referrer: string,
      callAddresses: string[],
      callDataConcat: BytesLike,
      starts: BigNumberish[],
      gasLimitsAndValues: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    fromToken: string,
    toToken: string,
    fromTokenAmount: BigNumberish,
    minReturnAmount: BigNumberish,
    guaranteedAmount: BigNumberish,
    referrer: string,
    callAddresses: string[],
    callDataConcat: BytesLike,
    starts: BigNumberish[],
    gasLimitsAndValues: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      fromToken: string,
      toToken: string,
      fromTokenAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      guaranteedAmount: BigNumberish,
      referrer: string,
      callAddresses: string[],
      callDataConcat: BytesLike,
      starts: BigNumberish[],
      gasLimitsAndValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    swap(
      fromToken: string,
      toToken: string,
      fromTokenAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      guaranteedAmount: BigNumberish,
      referrer: string,
      callAddresses: string[],
      callDataConcat: BytesLike,
      starts: BigNumberish[],
      gasLimitsAndValues: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      fromToken: string,
      toToken: string,
      fromTokenAmount: BigNumberish,
      minReturnAmount: BigNumberish,
      guaranteedAmount: BigNumberish,
      referrer: string,
      callAddresses: string[],
      callDataConcat: BytesLike,
      starts: BigNumberish[],
      gasLimitsAndValues: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
