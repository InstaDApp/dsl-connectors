/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CurveGaugeMappingInterface extends utils.Interface {
  functions: {
    "addGaugeMappings(string[],address[],bool[])": FunctionFragment;
    "connectors()": FunctionFragment;
    "gaugeMapping(bytes32)": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "name()": FunctionFragment;
    "removeGaugeMapping(string,address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addGaugeMappings",
    values: [string[], string[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "connectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gaugeMapping",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGaugeMapping",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addGaugeMappings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gaugeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGaugeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "LogAddGaugeMapping(string,address,bool)": EventFragment;
    "LogRemoveGaugeMapping(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAddGaugeMapping"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveGaugeMapping"): EventFragment;
}

export type LogAddGaugeMappingEvent = TypedEvent<
  [string, string, boolean],
  { gaugeName: string; gaugeAddress: string; rewardToken: boolean }
>;

export type LogAddGaugeMappingEventFilter =
  TypedEventFilter<LogAddGaugeMappingEvent>;

export type LogRemoveGaugeMappingEvent = TypedEvent<
  [string, string],
  { gaugeName: string; gaugeAddress: string }
>;

export type LogRemoveGaugeMappingEventFilter =
  TypedEventFilter<LogRemoveGaugeMappingEvent>;

export interface CurveGaugeMapping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveGaugeMappingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addGaugeMappings(
      gaugeNames: string[],
      gaugeAddresses: string[],
      rewardTokens: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectors(overrides?: CallOverrides): Promise<[string]>;

    gaugeMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { gaugeAddress: string; rewardToken: boolean }
    >;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    removeGaugeMapping(
      gaugeName: string,
      gaugeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addGaugeMappings(
    gaugeNames: string[],
    gaugeAddresses: string[],
    rewardTokens: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectors(overrides?: CallOverrides): Promise<string>;

  gaugeMapping(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { gaugeAddress: string; rewardToken: boolean }
  >;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  removeGaugeMapping(
    gaugeName: string,
    gaugeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addGaugeMappings(
      gaugeNames: string[],
      gaugeAddresses: string[],
      rewardTokens: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    connectors(overrides?: CallOverrides): Promise<string>;

    gaugeMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { gaugeAddress: string; rewardToken: boolean }
    >;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    removeGaugeMapping(
      gaugeName: string,
      gaugeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogAddGaugeMapping(string,address,bool)"(
      gaugeName?: null,
      gaugeAddress?: null,
      rewardToken?: null
    ): LogAddGaugeMappingEventFilter;
    LogAddGaugeMapping(
      gaugeName?: null,
      gaugeAddress?: null,
      rewardToken?: null
    ): LogAddGaugeMappingEventFilter;

    "LogRemoveGaugeMapping(string,address)"(
      gaugeName?: null,
      gaugeAddress?: null
    ): LogRemoveGaugeMappingEventFilter;
    LogRemoveGaugeMapping(
      gaugeName?: null,
      gaugeAddress?: null
    ): LogRemoveGaugeMappingEventFilter;
  };

  estimateGas: {
    addGaugeMappings(
      gaugeNames: string[],
      gaugeAddresses: string[],
      rewardTokens: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectors(overrides?: CallOverrides): Promise<BigNumber>;

    gaugeMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    removeGaugeMapping(
      gaugeName: string,
      gaugeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addGaugeMappings(
      gaugeNames: string[],
      gaugeAddresses: string[],
      rewardTokens: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gaugeMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGaugeMapping(
      gaugeName: string,
      gaugeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
