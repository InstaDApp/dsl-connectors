/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2InstaPoolV3AvalancheInterface
  extends utils.Interface {
  functions: {
    "flashBorrowAndCast(address,uint256,uint256,bytes)": FunctionFragment;
    "flashMultiBorrowAndCast(address[],uint256[],uint256,bytes)": FunctionFragment;
    "flashMultiPayback(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "flashPayback(address,uint256,uint256,uint256)": FunctionFragment;
    "instaPool()": FunctionFragment;
    "name()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "flashBorrowAndCast",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashMultiBorrowAndCast",
    values: [string[], BigNumberish[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashMultiPayback",
    values: [string[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "flashPayback",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "instaPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "flashBorrowAndCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashMultiBorrowAndCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashMultiPayback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashPayback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instaPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {
    "LogFlashBorrow(address,uint256)": EventFragment;
    "LogFlashMultiBorrow(address[],uint256[])": EventFragment;
    "LogFlashMultiPayback(address[],uint256[])": EventFragment;
    "LogFlashPayback(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogFlashBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFlashMultiBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFlashMultiPayback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogFlashPayback"): EventFragment;
}

export type LogFlashBorrowEvent = TypedEvent<
  [string, BigNumber],
  { token: string; tokenAmt: BigNumber }
>;

export type LogFlashBorrowEventFilter = TypedEventFilter<LogFlashBorrowEvent>;

export type LogFlashMultiBorrowEvent = TypedEvent<
  [string[], BigNumber[]],
  { token: string[]; tokenAmts: BigNumber[] }
>;

export type LogFlashMultiBorrowEventFilter =
  TypedEventFilter<LogFlashMultiBorrowEvent>;

export type LogFlashMultiPaybackEvent = TypedEvent<
  [string[], BigNumber[]],
  { token: string[]; tokenAmts: BigNumber[] }
>;

export type LogFlashMultiPaybackEventFilter =
  TypedEventFilter<LogFlashMultiPaybackEvent>;

export type LogFlashPaybackEvent = TypedEvent<
  [string, BigNumber],
  { token: string; tokenAmt: BigNumber }
>;

export type LogFlashPaybackEventFilter = TypedEventFilter<LogFlashPaybackEvent>;

export interface ConnectV2InstaPoolV3Avalanche extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2InstaPoolV3AvalancheInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    flashBorrowAndCast(
      token: string,
      amt: BigNumberish,
      route: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashMultiBorrowAndCast(
      tokens_: string[],
      amts_: BigNumberish[],
      route: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashMultiPayback(
      tokens_: string[],
      amts_: BigNumberish[],
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flashPayback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    instaPool(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;
  };

  flashBorrowAndCast(
    token: string,
    amt: BigNumberish,
    route: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashMultiBorrowAndCast(
    tokens_: string[],
    amts_: BigNumberish[],
    route: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashMultiPayback(
    tokens_: string[],
    amts_: BigNumberish[],
    getIds: BigNumberish[],
    setIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flashPayback(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  instaPool(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    flashBorrowAndCast(
      token: string,
      amt: BigNumberish,
      route: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    flashMultiBorrowAndCast(
      tokens_: string[],
      amts_: BigNumberish[],
      route: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    flashMultiPayback(
      tokens_: string[],
      amts_: BigNumberish[],
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    flashPayback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    instaPool(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogFlashBorrow(address,uint256)"(
      token?: null,
      tokenAmt?: null
    ): LogFlashBorrowEventFilter;
    LogFlashBorrow(token?: null, tokenAmt?: null): LogFlashBorrowEventFilter;

    "LogFlashMultiBorrow(address[],uint256[])"(
      token?: null,
      tokenAmts?: null
    ): LogFlashMultiBorrowEventFilter;
    LogFlashMultiBorrow(
      token?: null,
      tokenAmts?: null
    ): LogFlashMultiBorrowEventFilter;

    "LogFlashMultiPayback(address[],uint256[])"(
      token?: null,
      tokenAmts?: null
    ): LogFlashMultiPaybackEventFilter;
    LogFlashMultiPayback(
      token?: null,
      tokenAmts?: null
    ): LogFlashMultiPaybackEventFilter;

    "LogFlashPayback(address,uint256)"(
      token?: null,
      tokenAmt?: null
    ): LogFlashPaybackEventFilter;
    LogFlashPayback(token?: null, tokenAmt?: null): LogFlashPaybackEventFilter;
  };

  estimateGas: {
    flashBorrowAndCast(
      token: string,
      amt: BigNumberish,
      route: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashMultiBorrowAndCast(
      tokens_: string[],
      amts_: BigNumberish[],
      route: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashMultiPayback(
      tokens_: string[],
      amts_: BigNumberish[],
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flashPayback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    instaPool(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    flashBorrowAndCast(
      token: string,
      amt: BigNumberish,
      route: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashMultiBorrowAndCast(
      tokens_: string[],
      amts_: BigNumberish[],
      route: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashMultiPayback(
      tokens_: string[],
      amts_: BigNumberish[],
      getIds: BigNumberish[],
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flashPayback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    instaPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
