/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2BenqiIncentivesAvalancheInterface
  extends utils.Interface {
  functions: {
    "ClaimAvaxReward(uint256)": FunctionFragment;
    "ClaimAvaxRewardThree(string[],string[],uint256)": FunctionFragment;
    "ClaimAvaxRewardTwo(string[],uint256)": FunctionFragment;
    "ClaimQiReward(uint256)": FunctionFragment;
    "ClaimQiRewardThree(string[],string[],uint256)": FunctionFragment;
    "ClaimQiRewardTwo(string[],uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "name()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ClaimAvaxReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimAvaxRewardThree",
    values: [string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimAvaxRewardTwo",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimQiReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimQiRewardThree",
    values: [string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimQiRewardTwo",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ClaimAvaxReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimAvaxRewardThree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimAvaxRewardTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimQiReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimQiRewardThree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimQiRewardTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {
    "LogClaimedReward(uint256,uint256)": EventFragment;
    "LogDelegate(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDelegate"): EventFragment;
}

export type LogClaimedRewardEvent = TypedEvent<
  [BigNumber, BigNumber],
  { rewardAmt: BigNumber; setId: BigNumber }
>;

export type LogClaimedRewardEventFilter =
  TypedEventFilter<LogClaimedRewardEvent>;

export type LogDelegateEvent = TypedEvent<[string], { delegatee: string }>;

export type LogDelegateEventFilter = TypedEventFilter<LogDelegateEvent>;

export interface ConnectV2BenqiIncentivesAvalanche extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2BenqiIncentivesAvalancheInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ClaimAvaxReward(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimAvaxRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimAvaxRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimQiReward(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimQiRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimQiRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;
  };

  ClaimAvaxReward(
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimAvaxRewardThree(
    supplyTokenIds: string[],
    borrowTokenIds: string[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimAvaxRewardTwo(
    tokenIds: string[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimQiReward(
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimQiRewardThree(
    supplyTokenIds: string[],
    borrowTokenIds: string[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimQiRewardTwo(
    tokenIds: string[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ClaimAvaxReward(
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimAvaxRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimAvaxRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimQiReward(
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimQiRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimQiRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    delegate(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogClaimedReward(uint256,uint256)"(
      rewardAmt?: null,
      setId?: null
    ): LogClaimedRewardEventFilter;
    LogClaimedReward(
      rewardAmt?: null,
      setId?: null
    ): LogClaimedRewardEventFilter;

    "LogDelegate(address)"(delegatee?: null): LogDelegateEventFilter;
    LogDelegate(delegatee?: null): LogDelegateEventFilter;
  };

  estimateGas: {
    ClaimAvaxReward(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimAvaxRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimAvaxRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimQiReward(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimQiRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimQiRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ClaimAvaxReward(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimAvaxRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimAvaxRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimQiReward(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimQiRewardThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimQiRewardTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
