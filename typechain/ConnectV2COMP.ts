/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2COMPInterface extends utils.Interface {
  functions: {
    "ClaimComp(uint256)": FunctionFragment;
    "ClaimCompThree(string[],string[],uint256)": FunctionFragment;
    "ClaimCompTwo(string[],uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "name()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ClaimComp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimCompThree",
    values: [string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ClaimCompTwo",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ClaimComp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ClaimCompThree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ClaimCompTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;

  events: {
    "LogClaimedComp(uint256,uint256)": EventFragment;
    "LogDelegate(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogClaimedComp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDelegate"): EventFragment;
}

export type LogClaimedCompEvent = TypedEvent<
  [BigNumber, BigNumber],
  { compAmt: BigNumber; setId: BigNumber }
>;

export type LogClaimedCompEventFilter = TypedEventFilter<LogClaimedCompEvent>;

export type LogDelegateEvent = TypedEvent<[string], { delegatee: string }>;

export type LogDelegateEventFilter = TypedEventFilter<LogDelegateEvent>;

export interface ConnectV2COMP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2COMPInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimCompThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ClaimCompTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;
  };

  ClaimComp(
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimCompThree(
    supplyTokenIds: string[],
    borrowTokenIds: string[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ClaimCompTwo(
    tokenIds: string[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimCompThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    ClaimCompTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    delegate(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogClaimedComp(uint256,uint256)"(
      compAmt?: null,
      setId?: null
    ): LogClaimedCompEventFilter;
    LogClaimedComp(compAmt?: null, setId?: null): LogClaimedCompEventFilter;

    "LogDelegate(address)"(delegatee?: null): LogDelegateEventFilter;
    LogDelegate(delegatee?: null): LogDelegateEventFilter;
  };

  estimateGas: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimCompThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ClaimCompTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimCompThree(
      supplyTokenIds: string[],
      borrowTokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ClaimCompTwo(
      tokenIds: string[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
