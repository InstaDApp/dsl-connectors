/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ExtraResolverInterface extends utils.Interface {
  functions: {
    "ClaimComp(uint256)": FunctionFragment;
    "borrow(address,uint256,uint256,uint256)": FunctionFragment;
    "connectorID()": FunctionFragment;
    "deposit(address,uint256,uint256,uint256)": FunctionFragment;
    "depositCToken(address,uint256,uint256,uint256)": FunctionFragment;
    "liquidate(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "payback(address,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(address,uint256,uint256,uint256)": FunctionFragment;
    "withdrawCToken(address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ClaimComp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "connectorID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ClaimComp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "connectorID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCToken",
    data: BytesLike
  ): Result;

  events: {
    "LogBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "LogClaimedComp(uint256,uint256)": EventFragment;
    "LogDeposit(address,address,uint256,uint256,uint256)": EventFragment;
    "LogDepositCToken(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogLiquidate(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LogPayback(address,address,uint256,uint256,uint256)": EventFragment;
    "LogWithdraw(address,address,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawCToken(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClaimedComp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositCToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogLiquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPayback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawCToken"): EventFragment;
}

export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    cToken: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export type LogClaimedCompEvent = TypedEvent<
  [BigNumber, BigNumber],
  { compAmt: BigNumber; setId: BigNumber }
>;

export type LogClaimedCompEventFilter = TypedEventFilter<LogClaimedCompEvent>;

export type LogDepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    cToken: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export type LogDepositCTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    cToken: string;
    tokenAmt: BigNumber;
    cTokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogDepositCTokenEventFilter =
  TypedEventFilter<LogDepositCTokenEvent>;

export type LogLiquidateEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    borrower: string;
    tokenToPay: string;
    tokenInReturn: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogLiquidateEventFilter = TypedEventFilter<LogLiquidateEvent>;

export type LogPaybackEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    cToken: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogPaybackEventFilter = TypedEventFilter<LogPaybackEvent>;

export type LogWithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    cToken: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export type LogWithdrawCTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  {
    token: string;
    cToken: string;
    cTokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogWithdrawCTokenEventFilter =
  TypedEventFilter<LogWithdrawCTokenEvent>;

export interface ExtraResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExtraResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositCToken(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      borrower: string,
      tokenToPay: string,
      tokenInReturn: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawCToken(
      token: string,
      cTokenAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ClaimComp(
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectorID(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

  deposit(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositCToken(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    borrower: string,
    tokenToPay: string,
    tokenInReturn: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payback(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawCToken(
    token: string,
    cTokenAmt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ClaimComp(setId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    borrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositCToken(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      borrower: string,
      tokenToPay: string,
      tokenInReturn: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    payback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCToken(
      token: string,
      cTokenAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogBorrow(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogBorrowEventFilter;

    "LogClaimedComp(uint256,uint256)"(
      compAmt?: null,
      setId?: null
    ): LogClaimedCompEventFilter;
    LogClaimedComp(compAmt?: null, setId?: null): LogClaimedCompEventFilter;

    "LogDeposit(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;
    LogDeposit(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;

    "LogDepositCToken(address,address,uint256,uint256,uint256,uint256)"(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      cTokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositCTokenEventFilter;
    LogDepositCToken(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      cTokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositCTokenEventFilter;

    "LogLiquidate(address,address,address,uint256,uint256,uint256)"(
      borrower?: string | null,
      tokenToPay?: string | null,
      tokenInReturn?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogLiquidateEventFilter;
    LogLiquidate(
      borrower?: string | null,
      tokenToPay?: string | null,
      tokenInReturn?: string | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogLiquidateEventFilter;

    "LogPayback(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogPaybackEventFilter;
    LogPayback(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogPaybackEventFilter;

    "LogWithdraw(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      token?: string | null,
      cToken?: null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawEventFilter;

    "LogWithdrawCToken(address,address,uint256,uint256,uint256)"(
      token?: string | null,
      cToken?: null,
      cTokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawCTokenEventFilter;
    LogWithdrawCToken(
      token?: string | null,
      cToken?: null,
      cTokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawCTokenEventFilter;
  };

  estimateGas: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectorID(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositCToken(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidate(
      borrower: string,
      tokenToPay: string,
      tokenInReturn: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawCToken(
      token: string,
      cTokenAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ClaimComp(
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositCToken(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      borrower: string,
      tokenToPay: string,
      tokenInReturn: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payback(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCToken(
      token: string,
      cTokenAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
