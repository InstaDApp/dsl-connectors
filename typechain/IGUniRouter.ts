/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IGUniRouterInterface extends utils.Interface {
  functions: {
    "rebalanceAndAddLiquidity(address,uint256,uint256,bool,uint256,uint160,uint256,uint256,address)": FunctionFragment;
    "rebalanceAndAddLiquidityETH(address,uint256,uint256,bool,uint256,uint160,uint256,uint256,address)": FunctionFragment;
    "removeLiquidity(address,uint256,uint256,uint256,address)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "rebalanceAndAddLiquidity",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceAndAddLiquidityETH",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "rebalanceAndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceAndAddLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGUniRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGUniRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    rebalanceAndAddLiquidity(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalanceAndAddLiquidityETH(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  rebalanceAndAddLiquidity(
    pool: string,
    amount0In: BigNumberish,
    amount1In: BigNumberish,
    zeroForOne: boolean,
    swapAmount: BigNumberish,
    swapThreshold: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalanceAndAddLiquidityETH(
    pool: string,
    amount0In: BigNumberish,
    amount1In: BigNumberish,
    zeroForOne: boolean,
    swapAmount: BigNumberish,
    swapThreshold: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    receiver: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    pool: string,
    burnAmount: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    pool: string,
    burnAmount: BigNumberish,
    amount0Min: BigNumberish,
    amount1Min: BigNumberish,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    rebalanceAndAddLiquidity(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    rebalanceAndAddLiquidityETH(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        mintAmount: BigNumber;
      }
    >;

    removeLiquidity(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        liquidityBurned: BigNumber;
      }
    >;

    removeLiquidityETH(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount0: BigNumber;
        amount1: BigNumber;
        liquidityBurned: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    rebalanceAndAddLiquidity(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalanceAndAddLiquidityETH(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidityETH(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    rebalanceAndAddLiquidity(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalanceAndAddLiquidityETH(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      pool: string,
      burnAmount: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
