/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ResolverInterface extends utils.Interface {
  functions: {
    "delegate(address)": FunctionFragment;
    "voteCast(uint256,uint256)": FunctionFragment;
    "voteCastWithReason(uint256,uint256,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "voteCast",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteCastWithReason",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteCast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteCastWithReason",
    data: BytesLike
  ): Result;

  events: {
    "LogDelegate(address)": EventFragment;
    "LogVoteCast(uint256,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogVoteCast"): EventFragment;
}

export type LogDelegateEvent = TypedEvent<[string], { delegatee: string }>;

export type LogDelegateEventFilter = TypedEventFilter<LogDelegateEvent>;

export type LogVoteCastEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  { proposalId: BigNumber; support: BigNumber; reason: string }
>;

export type LogVoteCastEventFilter = TypedEventFilter<LogVoteCastEvent>;

export interface Resolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteCast(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteCastWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  delegate(
    delegatee: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteCast(
    proposalId: BigNumberish,
    support: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteCastWithReason(
    proposalId: BigNumberish,
    support: BigNumberish,
    reason: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    delegate(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    voteCast(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    voteCastWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogDelegate(address)"(delegatee?: null): LogDelegateEventFilter;
    LogDelegate(delegatee?: null): LogDelegateEventFilter;

    "LogVoteCast(uint256,uint256,string)"(
      proposalId?: null,
      support?: null,
      reason?: null
    ): LogVoteCastEventFilter;
    LogVoteCast(
      proposalId?: null,
      support?: null,
      reason?: null
    ): LogVoteCastEventFilter;
  };

  estimateGas: {
    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteCast(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteCastWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    delegate(
      delegatee: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteCast(
      proposalId: BigNumberish,
      support: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteCastWithReason(
      proposalId: BigNumberish,
      support: BigNumberish,
      reason: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
