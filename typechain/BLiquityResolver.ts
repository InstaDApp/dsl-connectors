/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface BLiquityResolverInterface extends utils.Interface {
  functions: {
    "deposit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogStabilityDeposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogStabilityWithdraw(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogStabilityDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStabilityWithdraw"): EventFragment;
}

export type LogStabilityDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    borrower: string;
    amount: BigNumber;
    lqtyGain: BigNumber;
    getDepositId: BigNumber;
    setDepositId: BigNumber;
    setLqtyGainId: BigNumber;
  }
>;

export type LogStabilityDepositEventFilter =
  TypedEventFilter<LogStabilityDepositEvent>;

export type LogStabilityWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    borrower: string;
    numShares: BigNumber;
    lqtyGain: BigNumber;
    getWithdrawId: BigNumber;
    setWithdrawId: BigNumber;
    setLqtyGainId: BigNumber;
  }
>;

export type LogStabilityWithdrawEventFilter =
  TypedEventFilter<LogStabilityWithdrawEvent>;

export interface BLiquityResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BLiquityResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      amount: BigNumberish,
      getDepositId: BigNumberish,
      setDepositId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      numShares: BigNumberish,
      getWithdrawId: BigNumberish,
      setWithdrawId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    amount: BigNumberish,
    getDepositId: BigNumberish,
    setDepositId: BigNumberish,
    setLqtyGainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    numShares: BigNumberish,
    getWithdrawId: BigNumberish,
    setWithdrawId: BigNumberish,
    setLqtyGainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      amount: BigNumberish,
      getDepositId: BigNumberish,
      setDepositId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    withdraw(
      numShares: BigNumberish,
      getWithdrawId: BigNumberish,
      setWithdrawId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogStabilityDeposit(address,uint256,uint256,uint256,uint256,uint256)"(
      borrower?: string | null,
      amount?: null,
      lqtyGain?: null,
      getDepositId?: null,
      setDepositId?: null,
      setLqtyGainId?: null
    ): LogStabilityDepositEventFilter;
    LogStabilityDeposit(
      borrower?: string | null,
      amount?: null,
      lqtyGain?: null,
      getDepositId?: null,
      setDepositId?: null,
      setLqtyGainId?: null
    ): LogStabilityDepositEventFilter;

    "LogStabilityWithdraw(address,uint256,uint256,uint256,uint256,uint256)"(
      borrower?: string | null,
      numShares?: null,
      lqtyGain?: null,
      getWithdrawId?: null,
      setWithdrawId?: null,
      setLqtyGainId?: null
    ): LogStabilityWithdrawEventFilter;
    LogStabilityWithdraw(
      borrower?: string | null,
      numShares?: null,
      lqtyGain?: null,
      getWithdrawId?: null,
      setWithdrawId?: null,
      setLqtyGainId?: null
    ): LogStabilityWithdrawEventFilter;
  };

  estimateGas: {
    deposit(
      amount: BigNumberish,
      getDepositId: BigNumberish,
      setDepositId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      numShares: BigNumberish,
      getWithdrawId: BigNumberish,
      setWithdrawId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      amount: BigNumberish,
      getDepositId: BigNumberish,
      setDepositId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      numShares: BigNumberish,
      getWithdrawId: BigNumberish,
      setWithdrawId: BigNumberish,
      setLqtyGainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
