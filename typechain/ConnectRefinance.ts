/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type RefinanceDataStruct = {
  source: BigNumberish;
  target: BigNumberish;
  collateralFee: BigNumberish;
  debtFee: BigNumberish;
  tokens: string[];
  ctokenIds: string[];
  borrowAmts: BigNumberish[];
  withdrawAmts: BigNumberish[];
  borrowRateModes: BigNumberish[];
  paybackRateModes: BigNumberish[];
};

export type RefinanceDataStructOutput = [
  number,
  number,
  BigNumber,
  BigNumber,
  string[],
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber[]
] & {
  source: number;
  target: number;
  collateralFee: BigNumber;
  debtFee: BigNumber;
  tokens: string[];
  ctokenIds: string[];
  borrowAmts: BigNumber[];
  withdrawAmts: BigNumber[];
  borrowRateModes: BigNumber[];
  paybackRateModes: BigNumber[];
};

export interface ConnectRefinanceInterface extends utils.Interface {
  functions: {
    "connectorID()": FunctionFragment;
    "name()": FunctionFragment;
    "refinance((uint8,uint8,uint256,uint256,address[],string[],uint256[],uint256[],uint256[],uint256[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "connectorID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refinance",
    values: [RefinanceDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "connectorID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refinance", data: BytesLike): Result;

  events: {};
}

export interface ConnectRefinance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectRefinanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    name(overrides?: CallOverrides): Promise<[string]>;

    refinance(
      data: RefinanceDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  connectorID(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

  name(overrides?: CallOverrides): Promise<string>;

  refinance(
    data: RefinanceDataStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    connectorID(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _type: BigNumber; _id: BigNumber }>;

    name(overrides?: CallOverrides): Promise<string>;

    refinance(
      data: RefinanceDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    connectorID(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    refinance(
      data: RefinanceDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    connectorID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refinance(
      data: RefinanceDataStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
