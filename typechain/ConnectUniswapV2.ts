/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectUniswapV2Interface extends utils.Interface {
  functions: {
    "buy(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "deposit(address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "sell(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(address,address,uint256,uint256,uint256,uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buy",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogBuy(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDepositLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogSell(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawLiquidity(address,address,uint256,uint256,uint256,uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawLiquidity"): EventFragment;
}

export type LogBuyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    buyToken: string;
    sellToken: string;
    buyAmt: BigNumber;
    sellAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogBuyEventFilter = TypedEventFilter<LogBuyEvent>;

export type LogDepositLiquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    tokenA: string;
    tokenB: string;
    amtA: BigNumber;
    amtB: BigNumber;
    uniAmount: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogDepositLiquidityEventFilter =
  TypedEventFilter<LogDepositLiquidityEvent>;

export type LogSellEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    buyToken: string;
    sellToken: string;
    buyAmt: BigNumber;
    sellAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogSellEventFilter = TypedEventFilter<LogSellEvent>;

export type LogWithdrawLiquidityEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]],
  {
    tokenA: string;
    tokenB: string;
    amountA: BigNumber;
    amountB: BigNumber;
    uniAmount: BigNumber;
    getId: BigNumber;
    setId: BigNumber[];
  }
>;

export type LogWithdrawLiquidityEventFilter =
  TypedEventFilter<LogWithdrawLiquidityEvent>;

export interface ConnectUniswapV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectUniswapV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      buyAddr: string,
      sellAddr: string,
      buyAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      tokenA: string,
      tokenB: string,
      amtA: BigNumberish,
      unitAmt: BigNumberish,
      slippage: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    sell(
      buyAddr: string,
      sellAddr: string,
      sellAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      tokenA: string,
      tokenB: string,
      uniAmt: BigNumberish,
      unitAmtA: BigNumberish,
      unitAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buy(
    buyAddr: string,
    sellAddr: string,
    buyAmt: BigNumberish,
    unitAmt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    tokenA: string,
    tokenB: string,
    amtA: BigNumberish,
    unitAmt: BigNumberish,
    slippage: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  sell(
    buyAddr: string,
    sellAddr: string,
    sellAmt: BigNumberish,
    unitAmt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    tokenA: string,
    tokenB: string,
    uniAmt: BigNumberish,
    unitAmtA: BigNumberish,
    unitAmtB: BigNumberish,
    getId: BigNumberish,
    setIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buy(
      buyAddr: string,
      sellAddr: string,
      buyAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      tokenA: string,
      tokenB: string,
      amtA: BigNumberish,
      unitAmt: BigNumberish,
      slippage: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    sell(
      buyAddr: string,
      sellAddr: string,
      sellAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      tokenA: string,
      tokenB: string,
      uniAmt: BigNumberish,
      unitAmtA: BigNumberish,
      unitAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogBuy(address,address,uint256,uint256,uint256,uint256)"(
      buyToken?: string | null,
      sellToken?: string | null,
      buyAmt?: null,
      sellAmt?: null,
      getId?: null,
      setId?: null
    ): LogBuyEventFilter;
    LogBuy(
      buyToken?: string | null,
      sellToken?: string | null,
      buyAmt?: null,
      sellAmt?: null,
      getId?: null,
      setId?: null
    ): LogBuyEventFilter;

    "LogDepositLiquidity(address,address,uint256,uint256,uint256,uint256,uint256)"(
      tokenA?: string | null,
      tokenB?: string | null,
      amtA?: null,
      amtB?: null,
      uniAmount?: null,
      getId?: null,
      setId?: null
    ): LogDepositLiquidityEventFilter;
    LogDepositLiquidity(
      tokenA?: string | null,
      tokenB?: string | null,
      amtA?: null,
      amtB?: null,
      uniAmount?: null,
      getId?: null,
      setId?: null
    ): LogDepositLiquidityEventFilter;

    "LogSell(address,address,uint256,uint256,uint256,uint256)"(
      buyToken?: string | null,
      sellToken?: string | null,
      buyAmt?: null,
      sellAmt?: null,
      getId?: null,
      setId?: null
    ): LogSellEventFilter;
    LogSell(
      buyToken?: string | null,
      sellToken?: string | null,
      buyAmt?: null,
      sellAmt?: null,
      getId?: null,
      setId?: null
    ): LogSellEventFilter;

    "LogWithdrawLiquidity(address,address,uint256,uint256,uint256,uint256,uint256[])"(
      tokenA?: string | null,
      tokenB?: string | null,
      amountA?: null,
      amountB?: null,
      uniAmount?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawLiquidityEventFilter;
    LogWithdrawLiquidity(
      tokenA?: string | null,
      tokenB?: string | null,
      amountA?: null,
      amountB?: null,
      uniAmount?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawLiquidityEventFilter;
  };

  estimateGas: {
    buy(
      buyAddr: string,
      sellAddr: string,
      buyAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      tokenA: string,
      tokenB: string,
      amtA: BigNumberish,
      unitAmt: BigNumberish,
      slippage: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      buyAddr: string,
      sellAddr: string,
      sellAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      tokenA: string,
      tokenB: string,
      uniAmt: BigNumberish,
      unitAmtA: BigNumberish,
      unitAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      buyAddr: string,
      sellAddr: string,
      buyAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      tokenA: string,
      tokenB: string,
      amtA: BigNumberish,
      unitAmt: BigNumberish,
      slippage: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sell(
      buyAddr: string,
      sellAddr: string,
      sellAmt: BigNumberish,
      unitAmt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenA: string,
      tokenB: string,
      uniAmt: BigNumberish,
      unitAmtA: BigNumberish,
      unitAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
