/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ReserveConfigurationMapStruct = { data: BigNumberish };

export type ReserveConfigurationMapStructOutput = [BigNumber] & {
  data: BigNumber;
};

export type ReserveDataStruct = {
  configuration: ReserveConfigurationMapStruct;
  liquidityIndex: BigNumberish;
  variableBorrowIndex: BigNumberish;
  currentLiquidityRate: BigNumberish;
  currentVariableBorrowRate: BigNumberish;
  currentStableBorrowRate: BigNumberish;
  lastUpdateTimestamp: BigNumberish;
  aTokenAddress: string;
  stableDebtTokenAddress: string;
  variableDebtTokenAddress: string;
  interestRateStrategyAddress: string;
  id: BigNumberish;
};

export type ReserveDataStructOutput = [
  ReserveConfigurationMapStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  string,
  string,
  string,
  string,
  number
] & {
  configuration: ReserveConfigurationMapStructOutput;
  liquidityIndex: BigNumber;
  variableBorrowIndex: BigNumber;
  currentLiquidityRate: BigNumber;
  currentVariableBorrowRate: BigNumber;
  currentStableBorrowRate: BigNumber;
  lastUpdateTimestamp: number;
  aTokenAddress: string;
  stableDebtTokenAddress: string;
  variableDebtTokenAddress: string;
  interestRateStrategyAddress: string;
  id: number;
};

export interface LendingPoolInterfaceInterface extends utils.Interface {
  functions: {
    "getReserveData(address)": FunctionFragment;
    "getReservesList()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList",
    data: BytesLike
  ): Result;

  events: {};
}

export interface LendingPoolInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPoolInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[ReserveDataStructOutput]>;

    getReservesList(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getReserveData(
    asset: string,
    overrides?: CallOverrides
  ): Promise<ReserveDataStructOutput>;

  getReservesList(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<ReserveDataStructOutput>;

    getReservesList(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservesList(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getReserveData(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservesList(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
