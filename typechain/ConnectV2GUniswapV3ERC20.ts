/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2GUniswapV3ERC20Interface extends utils.Interface {
  functions: {
    "deposit(address,uint256,uint256,uint256,uint256[],uint256)": FunctionFragment;
    "gUniRouter()": FunctionFragment;
    "name()": FunctionFragment;
    "swapAndDeposit(address,uint256,uint256,bool,uint256,uint160,uint256,uint256)": FunctionFragment;
    "withdraw(address,uint256,uint256,uint256,uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gUniRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapAndDeposit",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gUniRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "LogDepositLiquidity(address,uint256,uint256,uint256,uint256[],uint256)": EventFragment;
    "LogSwapAndDepositLiquidity(address,uint256,uint256,uint256,bool,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawLiquidity(address,uint256,uint256,uint256,uint256,uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDepositLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSwapAndDepositLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawLiquidity"): EventFragment;
}

export type LogDepositLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber],
  {
    pool: string;
    amtA: BigNumber;
    amtB: BigNumber;
    mintAmount: BigNumber;
    getIds: BigNumber[];
    setId: BigNumber;
  }
>;

export type LogDepositLiquidityEventFilter =
  TypedEventFilter<LogDepositLiquidityEvent>;

export type LogSwapAndDepositLiquidityEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    pool: string;
    amtA: BigNumber;
    amtB: BigNumber;
    mintAmount: BigNumber;
    zeroForOne: boolean;
    swapAmount: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogSwapAndDepositLiquidityEventFilter =
  TypedEventFilter<LogSwapAndDepositLiquidityEvent>;

export type LogWithdrawLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber[]],
  {
    pool: string;
    amountA: BigNumber;
    amountB: BigNumber;
    burnAmount: BigNumber;
    getId: BigNumber;
    setIds: BigNumber[];
  }
>;

export type LogWithdrawLiquidityEventFilter =
  TypedEventFilter<LogWithdrawLiquidityEvent>;

export interface ConnectV2GUniswapV3ERC20 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2GUniswapV3ERC20Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deposit(
      pool: string,
      amt0Max: BigNumberish,
      amt1Max: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gUniRouter(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    swapAndDeposit(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      pool: string,
      liqAmt: BigNumberish,
      minAmtA: BigNumberish,
      minAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deposit(
    pool: string,
    amt0Max: BigNumberish,
    amt1Max: BigNumberish,
    slippage: BigNumberish,
    getIds: BigNumberish[],
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gUniRouter(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  swapAndDeposit(
    pool: string,
    amount0In: BigNumberish,
    amount1In: BigNumberish,
    zeroForOne: boolean,
    swapAmount: BigNumberish,
    swapThreshold: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    pool: string,
    liqAmt: BigNumberish,
    minAmtA: BigNumberish,
    minAmtB: BigNumberish,
    getId: BigNumberish,
    setIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      pool: string,
      amt0Max: BigNumberish,
      amt1Max: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    gUniRouter(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    swapAndDeposit(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    withdraw(
      pool: string,
      liqAmt: BigNumberish,
      minAmtA: BigNumberish,
      minAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogDepositLiquidity(address,uint256,uint256,uint256,uint256[],uint256)"(
      pool?: string | null,
      amtA?: null,
      amtB?: null,
      mintAmount?: null,
      getIds?: null,
      setId?: null
    ): LogDepositLiquidityEventFilter;
    LogDepositLiquidity(
      pool?: string | null,
      amtA?: null,
      amtB?: null,
      mintAmount?: null,
      getIds?: null,
      setId?: null
    ): LogDepositLiquidityEventFilter;

    "LogSwapAndDepositLiquidity(address,uint256,uint256,uint256,bool,uint256,uint256,uint256)"(
      pool?: string | null,
      amtA?: null,
      amtB?: null,
      mintAmount?: null,
      zeroForOne?: null,
      swapAmount?: null,
      getId?: null,
      setId?: null
    ): LogSwapAndDepositLiquidityEventFilter;
    LogSwapAndDepositLiquidity(
      pool?: string | null,
      amtA?: null,
      amtB?: null,
      mintAmount?: null,
      zeroForOne?: null,
      swapAmount?: null,
      getId?: null,
      setId?: null
    ): LogSwapAndDepositLiquidityEventFilter;

    "LogWithdrawLiquidity(address,uint256,uint256,uint256,uint256,uint256[])"(
      pool?: string | null,
      amountA?: null,
      amountB?: null,
      burnAmount?: null,
      getId?: null,
      setIds?: null
    ): LogWithdrawLiquidityEventFilter;
    LogWithdrawLiquidity(
      pool?: string | null,
      amountA?: null,
      amountB?: null,
      burnAmount?: null,
      getId?: null,
      setIds?: null
    ): LogWithdrawLiquidityEventFilter;
  };

  estimateGas: {
    deposit(
      pool: string,
      amt0Max: BigNumberish,
      amt1Max: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gUniRouter(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    swapAndDeposit(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      pool: string,
      liqAmt: BigNumberish,
      minAmtA: BigNumberish,
      minAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      pool: string,
      amt0Max: BigNumberish,
      amt1Max: BigNumberish,
      slippage: BigNumberish,
      getIds: BigNumberish[],
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gUniRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapAndDeposit(
      pool: string,
      amount0In: BigNumberish,
      amount1In: BigNumberish,
      zeroForOne: boolean,
      swapAmount: BigNumberish,
      swapThreshold: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      pool: string,
      liqAmt: BigNumberish,
      minAmtA: BigNumberish,
      minAmtB: BigNumberish,
      getId: BigNumberish,
      setIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
