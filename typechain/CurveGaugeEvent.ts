/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CurveGaugeEventInterface extends utils.Interface {
  functions: {};

  events: {
    "LogClaimedReward(string,uint256,uint256,uint256,uint256)": EventFragment;
    "LogDeposit(string,uint256,uint256,uint256)": EventFragment;
    "LogWithdraw(string,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogClaimedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
}

export type LogClaimedRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    gaugePoolName: string;
    amount: BigNumber;
    rewardAmt: BigNumber;
    setId: BigNumber;
    setIdReward: BigNumber;
  }
>;

export type LogClaimedRewardEventFilter =
  TypedEventFilter<LogClaimedRewardEvent>;

export type LogDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    gaugePoolName: string;
    amount: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export type LogWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    gaugePoolName: string;
    amount: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export interface CurveGaugeEvent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CurveGaugeEventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "LogClaimedReward(string,uint256,uint256,uint256,uint256)"(
      gaugePoolName?: string | null,
      amount?: null,
      rewardAmt?: null,
      setId?: null,
      setIdReward?: null
    ): LogClaimedRewardEventFilter;
    LogClaimedReward(
      gaugePoolName?: string | null,
      amount?: null,
      rewardAmt?: null,
      setId?: null,
      setIdReward?: null
    ): LogClaimedRewardEventFilter;

    "LogDeposit(string,uint256,uint256,uint256)"(
      gaugePoolName?: string | null,
      amount?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;
    LogDeposit(
      gaugePoolName?: string | null,
      amount?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;

    "LogWithdraw(string,uint256,uint256,uint256)"(
      gaugePoolName?: string | null,
      amount?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      gaugePoolName?: string | null,
      amount?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
