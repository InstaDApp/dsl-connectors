/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ChiHelpers, ChiHelpersInterface } from "../ChiHelpers";

const _abi = [
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "model",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50609f8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063eb15f78114602d575b600080fd5b60336050565b604051808381526020018281526020019250505060405180910390f35b600080600160248191508090508092508193505050909156fea26469706673582212200feb976ac57fa1a4e91c8f00d62e9af1047bd74cc8854cda607826a1074dacc464736f6c63430006050033";

type ChiHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChiHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChiHelpers__factory extends ContractFactory {
  constructor(...args: ChiHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChiHelpers> {
    return super.deploy(overrides || {}) as Promise<ChiHelpers>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChiHelpers {
    return super.attach(address) as ChiHelpers;
  }
  connect(signer: Signer): ChiHelpers__factory {
    return super.connect(signer) as ChiHelpers__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChiHelpersInterface {
    return new utils.Interface(_abi) as ChiHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChiHelpers {
    return new Contract(address, _abi, signerOrProvider) as ChiHelpers;
  }
}
