/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Setup, SetupInterface } from "../Setup";

const _abi = [
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060d38061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063eb15f78114602d575b600080fd5b60336048565b604051603f929190606e565b60405180910390f35b6000806001602581915080905080925081935050509091565b6068816093565b82525050565b6000604082019050608160008301856061565b608c60208301846061565b9392505050565b600081905091905056fea2646970667358221220a726b8d801497b054c92a3fa3347a3379db2871d3e104fedac704f1db2dbc2db64736f6c63430006050033";

type SetupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SetupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Setup__factory extends ContractFactory {
  constructor(...args: SetupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Setup> {
    return super.deploy(overrides || {}) as Promise<Setup>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Setup {
    return super.attach(address) as Setup;
  }
  connect(signer: Signer): Setup__factory {
    return super.connect(signer) as Setup__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SetupInterface {
    return new utils.Interface(_abi) as SetupInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Setup {
    return new Contract(address, _abi, signerOrProvider) as Setup;
  }
}
