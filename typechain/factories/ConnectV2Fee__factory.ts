/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectV2Fee, ConnectV2FeeInterface } from "../ConnectV2Fee";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setIdAmtMinusFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setIdFee",
        type: "uint256",
      },
    ],
    name: "calculateAmtMinusFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setIdFee",
        type: "uint256",
      },
    ],
    name: "calculateFee",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061059b806100206000396000f3fe6080604052600436106100345760003560e01c806306fdde0314610039578063213a3d8c146100c3578063b25fecef146100fa575b600080fd5b34801561004557600080fd5b5061004e61020d565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610088578181015183820152602001610070565b50505050905090810190601f1680156100b55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100f8600480360360a08110156100d957600080fd5b508035906020810135906040810135906060810135906080013561022f565b005b61012f600480360360a081101561011057600080fd5b5080359060208101359060408101359060608101359060800135610277565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610170578181015183820152602001610158565b50505050905090810190601f16801561019d5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156101d05781810151838201526020016101b8565b50505050905090810190601f1680156101fd5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b604051806040016040528060068152602001654665652d763160d01b81525081565b600061023b84876102c5565b905060006102498287610361565b905060006102578383610396565b905061026385826103a2565b61026d84836103a2565b5050505050505050565b606080600061028686896102c5565b905060006102948289610361565b905060006102a2838361041f565b90506102ae87826103a2565b6102b886836103a2565b5050509550959350505050565b6000821561035857738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561032757600080fd5b505af115801561033b573d6000803e3d6000fd5b505050506040513d602081101561035157600080fd5b505161035a565b815b9392505050565b6000670de0b6b3a7640000610387610379858561042b565b6706f05b59d3b2000061048d565b8161038e57fe5b049392505050565b600061035a83836104e7565b811561041b5760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b15801561040257600080fd5b505af1158015610416573d6000803e3d6000fd5b505050505b5050565b600061035a838361048d565b60008261043a57506000610487565b8282028284828161044757fe5b04146104845760405162461bcd60e51b81526004018080602001828103825260218152602001806105456021913960400191505060405180910390fd5b90505b92915050565b600082820183811015610484576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008282111561053e576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212202c9c0fdcdee3c67b627561b64e8dee93cadb630ccad89fe5abe2861139a25c6c64736f6c63430007060033";

type ConnectV2FeeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectV2FeeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectV2Fee__factory extends ContractFactory {
  constructor(...args: ConnectV2FeeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectV2Fee> {
    return super.deploy(overrides || {}) as Promise<ConnectV2Fee>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectV2Fee {
    return super.attach(address) as ConnectV2Fee;
  }
  connect(signer: Signer): ConnectV2Fee__factory {
    return super.connect(signer) as ConnectV2Fee__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectV2FeeInterface {
    return new utils.Interface(_abi) as ConnectV2FeeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectV2Fee {
    return new Contract(address, _abi, signerOrProvider) as ConnectV2Fee;
  }
}
