/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConnectStaking,
  ConnectStakingInterface,
} from "../ConnectStaking";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "stakingType",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardAmt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogClaimedReward",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "stakingType",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "stakingType",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogWithdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stakingPoolName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "claimReward",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stakingPoolName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stakingPoolName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setIdAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setIdReward",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600c60808190526b5374616b696e672d76312e3160a01b60a090815261002d9160009190610040565b5034801561003a57600080fd5b506100e1565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261007657600085556100bc565b82601f1061008f57805160ff19168380011785556100bc565b828001600101855582156100bc579182015b828111156100bc5782518255916020019190600101906100a1565b506100c89291506100cc565b5090565b5b808211156100c857600081556001016100cd565b610e61806100f06000396000f3fe60806040526004361061003f5760003560e01c806306fdde03146100445780634294e96a1461006f57806350bb9a751461008457806366d0eb8014610097575b600080fd5b34801561005057600080fd5b506100596100aa565b6040516100669190610d62565b60405180910390f35b61008261007d366004610bad565b610138565b005b610082610092366004610bf7565b61033e565b6100826100a5366004610c4f565b61052b565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156101305780601f1061010557610100808354040283529160200191610130565b820191906000526020600020905b81548152906001019060200180831161011357829003601f168201915b505050505081565b600080600061017c86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061088292505050565b935093505092506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016101b19190610d2c565b60206040518083038186803b1580156101c957600080fd5b505afa1580156101dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102019190610d14565b9050836001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023e57600080fd5b505af1158015610252573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a0823190610285903090600401610d2c565b60206040518083038186803b15801561029d57600080fd5b505afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190610d14565b905060006102e38284610980565b90506102ef8782610993565b83856001600160a01b03167fe4c5cd665915b99737dff8357496629fd7fcb882ef5de97bc587864d838cab6e838a60405161032b929190610e07565b60405180910390a3505050505050505050565b600061034a8385610a10565b9050600080600061039089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061088292505050565b9350509250925060001984146103a65783610422565b6040516370a0823160e01b81526001600160a01b038316906370a08231906103d2903090600401610d2c565b60206040518083038186803b1580156103ea57600080fd5b505afa1580156103fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104229190610d14565b60405163095ea7b360e01b81529094506001600160a01b0383169063095ea7b3906104539086908890600401610d40565b600060405180830381600087803b15801561046d57600080fd5b505af1158015610481573d6000803e3d6000fd5b505060405163534a7e1d60e11b81526001600160a01b038616925063a694fc3a91506104b1908790600401610d59565b600060405180830381600087803b1580156104cb57600080fd5b505af11580156104df573d6000803e3d6000fd5b505050506104ed8585610993565b80826001600160a01b03167f2e2761f646b354a5faab29bd1678d8b4d7c99f316c85f66d8487272a9c186a3c86898960405161032b93929190610e15565b60006105378486610a10565b905060008060008061057e8b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061088292505050565b935093509350935060001985146105955784610611565b6040516370a0823160e01b81526001600160a01b038516906370a08231906105c1903090600401610d2c565b60206040518083038186803b1580156105d957600080fd5b505afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190610d14565b94506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016106419190610d2c565b60206040518083038186803b15801561065957600080fd5b505afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610d14565b604051632e1a7d4d60e01b81529091506001600160a01b03861690632e1a7d4d906106c0908990600401610d59565b600060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b50505050846001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072d57600080fd5b505af1158015610741573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a0823190610774903090600401610d2c565b60206040518083038186803b15801561078c57600080fd5b505afa1580156107a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c49190610d14565b905060006107d28284610980565b90506107de8a89610993565b6107e88982610993565b83866001600160a01b03167f4fb06e45ba3d46dd81cdfd7cf106abf8b32d4cd668a6afac45d6e1dd20df22948a8e8e60405161082693929190610e15565b60405180910390a383856001600160a01b03167fe4c5cd665915b99737dff8357496629fd7fcb882ef5de97bc587864d838cab6e838c60405161086a929190610e07565b60405180910390a35050505050505050505050505050565b60008060008061089185610aa9565b9050600061089d610ad5565b6001600160a01b031663a07d8bf8836040518263ffffffff1660e01b81526004016108c89190610d59565b60606040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109189190610caf565b80519091506001600160a01b031615801590610940575060208101516001600160a01b031615155b6109655760405162461bcd60e51b815260040161095c90610db5565b60405180910390fd5b80516020820151604090920151909791965094509092509050565b600061098c8383610aed565b9392505050565b8115610a0c5760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b1580156109f357600080fd5b505af1158015610a07573d6000803e3d6000fd5b505050505b5050565b60008215610aa357738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610a7257600080fd5b505af1158015610a86573d6000803e3d6000fd5b505050506040513d6020811015610a9c57600080fd5b505161098c565b50919050565b6000815160001415610acd5760405162461bcd60e51b815260040161095c90610de1565b506020015190565b73772590f33ed05b0e83553650bf9e75a04b33752690565b600082821115610b44576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b80516001600160a01b0381168114610b6157600080fd5b919050565b60008083601f840112610b77578182fd5b50813567ffffffffffffffff811115610b8e578182fd5b602083019150836020828501011115610ba657600080fd5b9250929050565b600080600060408486031215610bc1578283fd5b833567ffffffffffffffff811115610bd7578384fd5b610be386828701610b66565b909790965060209590950135949350505050565b600080600080600060808688031215610c0e578081fd5b853567ffffffffffffffff811115610c24578182fd5b610c3088828901610b66565b9099909850602088013597604081013597506060013595509350505050565b60008060008060008060a08789031215610c67578081fd5b863567ffffffffffffffff811115610c7d578182fd5b610c8989828a01610b66565b909a90995060208901359860408101359850606081013597506080013595509350505050565b600060608284031215610cc0578081fd5b6040516060810181811067ffffffffffffffff82111715610cdd57fe5b604052610ce983610b4a565b8152610cf760208401610b4a565b6020820152610d0860408401610b4a565b60408201529392505050565b600060208284031215610d25578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b6000602080835283518082850152825b81811015610d8e57858101830151858201604001528201610d72565b81811115610d9f5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527157726f6e67205374616b696e67204e616d6560701b604082015260600190565b6020808252600c908201526b737472696e672d656d70747960a01b604082015260600190565b918252602082015260400190565b928352602083019190915260408201526060019056fea2646970667358221220b54db6d7a9f0e6cbcd5ea421438d3e2a48a905d2b06c6ccc6965dc58cc620bb564736f6c63430007060033";

type ConnectStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectStaking__factory extends ContractFactory {
  constructor(...args: ConnectStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectStaking> {
    return super.deploy(overrides || {}) as Promise<ConnectStaking>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectStaking {
    return super.attach(address) as ConnectStaking;
  }
  connect(signer: Signer): ConnectStaking__factory {
    return super.connect(signer) as ConnectStaking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectStakingInterface {
    return new utils.Interface(_abi) as ConnectStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectStaking {
    return new Contract(address, _abi, signerOrProvider) as ConnectStaking;
  }
}
