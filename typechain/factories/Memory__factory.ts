/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Memory, MemoryInterface } from "../Memory";

const _abi = [
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50608a8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063eb15f78114602d575b600080fd5b6033604c565b6040805192835260208301919091528051918290030190f35b60029060019056fea2646970667358221220bfe2902bdc13d36be9fd780b05aa910e9137e6b0db91733d6856307b8bb3de7d64736f6c63430007060033";

type MemoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MemoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Memory__factory extends ContractFactory {
  constructor(...args: MemoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Memory> {
    return super.deploy(overrides || {}) as Promise<Memory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Memory {
    return super.attach(address) as Memory;
  }
  connect(signer: Signer): Memory__factory {
    return super.connect(signer) as Memory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MemoryInterface {
    return new utils.Interface(_abi) as MemoryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Memory {
    return new Contract(address, _abi, signerOrProvider) as Memory;
  }
}
