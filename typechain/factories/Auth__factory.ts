/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Auth, AuthInterface } from "../Auth";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_msgSender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogAddAuth",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_msgSender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_authority",
        type: "address",
      },
    ],
    name: "LogRemoveAuth",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a87806100206000396000f3fe6080604052600436106100345760003560e01c80630a3b0a4f1461003957806329092d0e14610055578063eb15f78114610071575b600080fd5b610053600480360381019061004e9190610631565b61009d565b005b61006f600480360381019061006a9190610631565b61022e565b005b34801561007d57600080fd5b50610086610409565b60405161009492919061087e565b60405180910390f35b3073ffffffffffffffffffffffffffffffffffffffff16635bfa1b68826040518263ffffffff1660e01b81526004016100d6919061081a565b600060405180830381600087803b1580156100f057600080fd5b505af1158015610104573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0a0883e359d023e38c8befc2b894f838c1942537ae51cba71e2bc651af2b3a5d60405160405180910390a36000604051610170906107f0565b604051809103902090506060338360405160200161018f929190610835565b60405160208183030381529060405290506000806101ab610409565b915091506101b7610422565b73ffffffffffffffffffffffffffffffffffffffff1663e14d4fb1838387876040518563ffffffff1660e01b81526004016101f594939291906108a7565b600060405180830381600087803b15801561020f57600080fd5b505af1158015610223573d6000803e3d6000fd5b505050505050505050565b600161023861043e565b11610278576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026f9061085e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1663e6c09edf826040518263ffffffff1660e01b81526004016102b1919061081a565b600060405180830381600087803b1580156102cb57600080fd5b505af11580156102df573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7289d07acd866f85ba9176bdbac8304ca6072c00bde3d94c43afd8fbc8114db860405160405180910390a3600060405161034b90610805565b604051809103902090506060338360405160200161036a929190610835565b6040516020818303038152906040529050600080610386610409565b91509150610392610422565b73ffffffffffffffffffffffffffffffffffffffff1663e14d4fb1838387876040518563ffffffff1660e01b81526004016103d094939291906108a7565b600060405180830381600087803b1580156103ea57600080fd5b505af11580156103fe573d6000803e3d6000fd5b505050505050505050565b6000806001602581915080905080925081935050509091565b6000732af7ea6cb911035f3eb1ed895cb6692c39ecba97905090565b600080610449610576565b905060008173ffffffffffffffffffffffffffffffffffffffff16636cfaf5e9306040518263ffffffff1660e01b8152600401610486919061081a565b60206040518083038186803b15801561049e57600080fd5b505afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190610683565b90508173ffffffffffffffffffffffffffffffffffffffff16638028a9fd826040518263ffffffff1660e01b815260040161051191906108f3565b60606040518083038186803b15801561052957600080fd5b505afa15801561053d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610561919061065a565b6040015167ffffffffffffffff169250505090565b6000734c8a1beb8a87765788946d6b19c6c6355194abeb905090565b6000813590506105a181610a23565b92915050565b6000815190506105b681610a23565b92915050565b6000606082840312156105ce57600080fd5b6105d8606061090e565b905060006105e8848285016105a7565b60008301525060206105fc848285016105a7565b60208301525060406106108482850161061c565b60408301525092915050565b60008151905061062b81610a3a565b92915050565b60006020828403121561064357600080fd5b600061065184828501610592565b91505092915050565b60006060828403121561066c57600080fd5b600061067a848285016105bc565b91505092915050565b60006020828403121561069557600080fd5b60006106a38482850161061c565b91505092915050565b6106b581610985565b82525050565b6106c481610973565b82525050565b6106d381610997565b82525050565b60006106e48261093b565b6106ee8185610946565b93506106fe8185602086016109df565b61070781610a12565b840191505092915050565b600061071f601b83610968565b91507f4c6f674164644175746828616464726573732c616464726573732900000000006000830152601b82019050919050565b600061075f601883610957565b91507f52656d6f76696e672d616c6c2d617574686f72697469657300000000000000006000830152602082019050919050565b600061079f601e83610968565b91507f4c6f6752656d6f76654175746828616464726573732c616464726573732900006000830152601e82019050919050565b6107db816109c1565b82525050565b6107ea816109cb565b82525050565b60006107fb82610712565b9150819050919050565b600061081082610792565b9150819050919050565b600060208201905061082f60008301846106bb565b92915050565b600060408201905061084a60008301856106ac565b61085760208301846106bb565b9392505050565b6000602082019050818103600083015261087781610752565b9050919050565b600060408201905061089360008301856107d2565b6108a060208301846107d2565b9392505050565b60006080820190506108bc60008301876107d2565b6108c960208301866107d2565b6108d660408301856106ca565b81810360608301526108e881846106d9565b905095945050505050565b600060208201905061090860008301846107e1565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561093157600080fd5b8060405250919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061097e826109a1565b9050919050565b6000610990826109a1565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60005b838110156109fd5780820151818401526020810190506109e2565b83811115610a0c576000848401525b50505050565b6000601f19601f8301169050919050565b610a2c81610973565b8114610a3757600080fd5b50565b610a43816109cb565b8114610a4e57600080fd5b5056fea2646970667358221220c49314d11d600464c7534ffcd4266d788469878a809cd1da0ed6a2febbe55bf764736f6c63430006050033";

type AuthConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuthConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Auth__factory extends ContractFactory {
  constructor(...args: AuthConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Auth> {
    return super.deploy(overrides || {}) as Promise<Auth>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Auth {
    return super.attach(address) as Auth;
  }
  connect(signer: Signer): Auth__factory {
    return super.connect(signer) as Auth__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuthInterface {
    return new utils.Interface(_abi) as AuthInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Auth {
    return new Contract(address, _abi, signerOrProvider) as Auth;
  }
}
