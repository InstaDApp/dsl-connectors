/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectAaveV2, ConnectAaveV2Interface } from "../ConnectAaveV2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "rateMode",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogBorrow",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogDeposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "LogEnableCollateral",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "rateMode",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogPayback",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenAmt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogWithdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rateMode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "borrow",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "enableCollateral",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rateMode",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "payback",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600b60808190526a4161766556322d76312e3160a81b60a09081526200002e916000919062000043565b503480156200003c57600080fd5b50620000ef565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200007b5760008555620000c6565b82601f106200009657805160ff1916838001178555620000c6565b82800160010185558215620000c6579182015b82811115620000c6578251825591602001919060010190620000a9565b50620000d4929150620000d8565b5090565b5b80821115620000d45760008155600101620000d9565b61156680620000ff6000396000f3fe6080604052600436106100555760003560e01c806306fdde031461005a5780634532d776146100855780634e5e60e71461009a5780636abcd3de146100ad578063ce88b439146100c0578063da2b65c8146100d3575b600080fd5b34801561006657600080fd5b5061006f6100e6565b60405161007c9190611478565b60405180910390f35b61009861009336600461118b565b610174565b005b6100986100a83660046111c5565b610410565b6100986100bb3660046111c5565b61062c565b6100986100ce36600461118b565b6107c0565b6100986100e1366004611208565b610adc565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561016c5780601f106101415761010080835404028352916020019161016c565b820191906000526020600020905b81548152906001019060200180831161014f57829003601f168201915b505050505081565b60006101808385610c8d565b9050600061018c610d29565b6001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc919061116f565b90506001600160a01b03861673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1460008161022b5787610233565b610233610d41565b6040516370a0823160e01b815290915081906000906001600160a01b038316906370a0823190610267903090600401611319565b60206040518083038186803b15801561027f57600080fd5b505afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190611277565b604051631a4ca37b60e21b81529091506001600160a01b038616906369328dec906102ea9086908a90309060040161137b565b600060405180830381600087803b15801561030457600080fd5b505af1158015610318573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03851691506370a082319061034b903090600401611319565b60206040518083038186803b15801561036357600080fd5b505afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190611277565b90506103a78183610d59565b96506103b4858489610d65565b6103be8888610e2f565b8a6001600160a01b03167f9744d0a120f7c7d7906cfe3c05b50669fb49aa6d778b099d5d6edc386dee5b59888b8b6040516103fb93929190611502565b60405180910390a25050505050505050505050565b600061041c8386610c8d565b90506000610428610d29565b6001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046057600080fd5b505afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610498919061116f565b905060006104a4610eac565b90506001600160a01b03881673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146000816104d357896104db565b6104db610d41565b90508060001986146104ed57856104f8565b6104f884838b610ec4565b9550821561050b5761050b838288610f6d565b60405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906105399088908a90600401611362565b600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505060405163573ade8160e01b81526001600160a01b038816925063573ade81915061059d9085908a908e9030906004016113cb565b600060405180830381600087803b1580156105b757600080fd5b505af11580156105cb573d6000803e3d6000fd5b505050506105d98787610e2f565b888b6001600160a01b03167fda2016a89958b5c9b3ee30a3e0858b2dfcce432f8792d8f71dbf040e295e98e2888b8b60405161061793929190611502565b60405180910390a35050505050505050505050565b60006106388386610c8d565b90506000610644610d29565b6001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561067c57600080fd5b505afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b4919061116f565b90506001600160a01b03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146000816106e357886106eb565b6106eb610d41565b9050826001600160a01b031663a415bcad82868a610707610fcc565b306040518663ffffffff1660e01b81526004016107289594939291906113f6565b600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b50505050610765828286610d65565b61076f8585610e2f565b86896001600160a01b03167f7a820240d9f3ec4b998f20c82601ad5d316c006138f52c435c349ef46eae7ffb8689896040516107ad93929190611502565b60405180910390a3505050505050505050565b60006107cc8385610c8d565b905060006107d8610d29565b6001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561081057600080fd5b505afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610848919061116f565b90506000610854610eac565b90506001600160a01b03871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14600081610883578861088b565b61088b610d41565b90508082156108b75760001986146108a357856108a5565b475b95506108b2838288610f6d565b610945565b60001986146108c65785610942565b6040516370a0823160e01b81526001600160a01b038216906370a08231906108f2903090600401611319565b60206040518083038186803b15801561090a57600080fd5b505afa15801561091e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109429190611277565b95505b60405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906109739088908a90600401611362565b600060405180830381600087803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b50505050846001600160a01b031663e8eda9df8388306109bf610fcc565b6040518563ffffffff1660e01b81526004016109de949392919061139e565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50505050610a1b848330610fd2565b610a8157604051635a3b74b960e01b81526001600160a01b03861690635a3b74b990610a4e908590600190600401611347565b600060405180830381600087803b158015610a6857600080fd5b505af1158015610a7c573d6000803e3d6000fd5b505050505b610a8b8787610e2f565b896001600160a01b03167f4b2bcb0ca50531683faa51870e1018aa0d7272c7f2acc5399389b0c0493865d9878a8a604051610ac893929190611502565b60405180910390a250505050505050505050565b8080610b035760405162461bcd60e51b8152600401610afa906114cb565b60405180910390fd5b6000610b0d610d29565b6001600160a01b0316630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4557600080fd5b505afa158015610b59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7d919061116f565b90506000610b89610eac565b905060005b83811015610c4c576000868683818110610ba457fe5b9050602002016020810190610bb99190611153565b90506000610bc78483611064565b118015610bdc5750610bda838230610fd2565b155b15610c4357604051635a3b74b960e01b81526001600160a01b03851690635a3b74b990610c10908490600190600401611347565b600060405180830381600087803b158015610c2a57600080fd5b505af1158015610c3e573d6000803e3d6000fd5b505050505b50600101610b8e565b507f212f3c548fe60533d258f99a4d5a1b8578b6467e650b7ff5059b4c77f8e82cdb8585604051610c7e92919061142a565b60405180910390a15050505050565b60008215610d2057738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015610cef57600080fd5b505af1158015610d03573d6000803e3d6000fd5b505050506040513d6020811015610d1957600080fd5b5051610d22565b815b9392505050565b73b53c1a33016b2dc2ff3653530bff1848a515c8c590565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6000610d2283836110f6565b8215610e2a5760405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610d999085908590600401611362565b600060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b81526001600160a01b0385169250632e1a7d4d9150610df79084906004016114f9565b600060405180830381600087803b158015610e1157600080fd5b505af1158015610e25573d6000803e3d6000fd5b505050505b505050565b8115610ea85760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b158015610e8f57600080fd5b505af1158015610ea3573d6000803e3d6000fd5b505050505b5050565b73057835ad21a177dbdd3090bb1cae03eacf78fc6d90565b6000806000856001600160a01b03166328dd2d0186306040518363ffffffff1660e01b8152600401610ef792919061132d565b6101206040518083038186803b158015610f1057600080fd5b505afa158015610f24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f48919061128f565b505050505050925092505083600114610f615780610f63565b815b9695505050505050565b8215610e2a57816001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610fae57600080fd5b505af1158015610fc2573d6000803e3d6000fd5b5050505050505050565b610c9c90565b6040516328dd2d0160e01b81526000906001600160a01b038516906328dd2d0190611003908690869060040161132d565b6101206040518083038186803b15801561101c57600080fd5b505afa158015611030573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611054919061128f565b9c9b505050505050505050505050565b6040516328dd2d0160e01b81526000906001600160a01b038416906328dd2d0190611095908590309060040161132d565b6101206040518083038186803b1580156110ae57600080fd5b505afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e6919061128f565b50969a9950505050505050505050565b60008282111561114d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600060208284031215611164578081fd5b8135610d2281611518565b600060208284031215611180578081fd5b8151610d2281611518565b600080600080608085870312156111a0578283fd5b84356111ab81611518565b966020860135965060408601359560600135945092505050565b600080600080600060a086880312156111dc578081fd5b85356111e781611518565b97602087013597506040870135966060810135965060800135945092505050565b6000806020838503121561121a578182fd5b823567ffffffffffffffff80821115611231578384fd5b818501915085601f830112611244578384fd5b813581811115611252578485fd5b8660208083028501011115611265578485fd5b60209290920196919550909350505050565b600060208284031215611288578081fd5b5051919050565b60008060008060008060008060006101208a8c0312156112ad578384fd5b8951985060208a0151975060408a0151965060608a0151955060808a0151945060a08a0151935060c08a0151925060e08a015164ffffffffff811681146112f2578283fd5b6101008b01519092508015158114611308578182fd5b809150509295985092959850929598565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b60208082528181018390526000908460408401835b8681101561146d57823561145281611518565b6001600160a01b03168252918301919083019060010161143f565b509695505050505050565b6000602080835283518082850152825b818110156114a457858101830151858201604001528201611488565b818111156114b55783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601490820152730c0b5d1bdad95b9ccb5b9bdd0b585b1b1bddd95960621b604082015260600190565b90815260200190565b9283526020830191909152604082015260600190565b6001600160a01b038116811461152d57600080fd5b5056fea26469706673582212201a189cb619dbfc57a9f3aa60ce71b1bbc0fa502d5cb1609f481af9d5fbb778b064736f6c63430007060033";

type ConnectAaveV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectAaveV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectAaveV2__factory extends ContractFactory {
  constructor(...args: ConnectAaveV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectAaveV2> {
    return super.deploy(overrides || {}) as Promise<ConnectAaveV2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectAaveV2 {
    return super.attach(address) as ConnectAaveV2;
  }
  connect(signer: Signer): ConnectAaveV2__factory {
    return super.connect(signer) as ConnectAaveV2__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectAaveV2Interface {
    return new utils.Interface(_abi) as ConnectAaveV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectAaveV2 {
    return new Contract(address, _abi, signerOrProvider) as ConnectAaveV2;
  }
}
