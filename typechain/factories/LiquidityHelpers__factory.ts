/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LiquidityHelpers,
  LiquidityHelpersInterface,
} from "../LiquidityHelpers";

const _abi = [
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060948061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063eb15f78114602d575b600080fd5b60336048565b604051603f9291906050565b60405180910390f35b600190602190565b91825260208201526040019056fea2646970667358221220a65502f5019b02dbf2a83baa2449e62143d69ac5d39b7e474cd2adba5c7b74b264736f6c63430007060033";

type LiquidityHelpersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityHelpersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LiquidityHelpers__factory extends ContractFactory {
  constructor(...args: LiquidityHelpersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LiquidityHelpers> {
    return super.deploy(overrides || {}) as Promise<LiquidityHelpers>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LiquidityHelpers {
    return super.attach(address) as LiquidityHelpers;
  }
  connect(signer: Signer): LiquidityHelpers__factory {
    return super.connect(signer) as LiquidityHelpers__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityHelpersInterface {
    return new utils.Interface(_abi) as LiquidityHelpersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LiquidityHelpers {
    return new Contract(address, _abi, signerOrProvider) as LiquidityHelpers;
  }
}
