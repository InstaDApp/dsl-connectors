/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectFee, ConnectFeeInterface } from "../ConnectFee";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setIdFee",
        type: "uint256",
      },
    ],
    name: "calculateFee",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061060e806100206000396000f3fe6080604052600436106100345760003560e01c806306fdde0314610039578063b25fecef14610064578063eb15f78114610080575b600080fd5b34801561004557600080fd5b5061004e6100ac565b60405161005b91906104d1565b60405180910390f35b61007e600480360381019061007991906103d2565b6100e5565b005b34801561008c57600080fd5b5061009561012d565b6040516100a392919061052e565b60405180910390f35b6040518060400160405280600681526020017f4665652d7631000000000000000000000000000000000000000000000000000081525081565b60006100f18487610146565b905060006100ff82876101f0565b9050600061010d8383610230565b90506101198582610280565b6101238483610280565b5050505050505050565b6000806001602581915080905080925081935050509091565b60008083146101e657610157610301565b73ffffffffffffffffffffffffffffffffffffffff1663a9c70eaa846040518263ffffffff1660e01b815260040161018f9190610513565b602060405180830381600087803b1580156101a957600080fd5b505af11580156101bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e191906103a9565b6101e8565b815b905092915050565b6000670de0b6b3a7640000610220610208858561031d565b6002670de0b6b3a76400008161021a57fe5b04610230565b8161022757fe5b04905092915050565b600082828401915081101561027a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610271906104f3565b60405180910390fd5b92915050565b600082146102fd57610290610301565b73ffffffffffffffffffffffffffffffffffffffff166361e3c94483836040518363ffffffff1660e01b81526004016102ca92919061052e565b600060405180830381600087803b1580156102e457600080fd5b505af11580156102f8573d6000803e3d6000fd5b505050505b5050565b6000738a5419cfc711b2343c17a6abf4b2bafabb06957f905090565b60008082148061033a575082828385029250828161033757fe5b04145b610379576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610370906104f3565b60405180910390fd5b92915050565b60008135905061038e816105c1565b92915050565b6000815190506103a3816105c1565b92915050565b6000602082840312156103bb57600080fd5b60006103c984828501610394565b91505092915050565b600080600080600060a086880312156103ea57600080fd5b60006103f88882890161037f565b95505060206104098882890161037f565b945050604061041a8882890161037f565b935050606061042b8882890161037f565b925050608061043c8882890161037f565b9150509295509295909350565b600061045482610557565b61045e8185610562565b935061046e81856020860161057d565b610477816105b0565b840191505092915050565b600061048f600d83610562565b91507f6d6174682d6e6f742d73616665000000000000000000000000000000000000006000830152602082019050919050565b6104cb81610573565b82525050565b600060208201905081810360008301526104eb8184610449565b905092915050565b6000602082019050818103600083015261050c81610482565b9050919050565b600060208201905061052860008301846104c2565b92915050565b600060408201905061054360008301856104c2565b61055060208301846104c2565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b60005b8381101561059b578082015181840152602081019050610580565b838111156105aa576000848401525b50505050565b6000601f19601f8301169050919050565b6105ca81610573565b81146105d557600080fd5b5056fea2646970667358221220f9b697fe8ed465d2c72977a4f16495dc9a2fbe9fb2d20385a9acd2c569293beb64736f6c63430006050033";

type ConnectFeeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectFeeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectFee__factory extends ContractFactory {
  constructor(...args: ConnectFeeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectFee> {
    return super.deploy(overrides || {}) as Promise<ConnectFee>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectFee {
    return super.attach(address) as ConnectFee;
  }
  connect(signer: Signer): ConnectFee__factory {
    return super.connect(signer) as ConnectFee__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectFeeInterface {
    return new utils.Interface(_abi) as ConnectFeeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectFee {
    return new Contract(address, _abi, signerOrProvider) as ConnectFee;
  }
}
