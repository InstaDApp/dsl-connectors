/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  InstaStakingERC20Mapping,
  InstaStakingERC20MappingInterface,
} from "../InstaStakingERC20Mapping";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "stakingName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "stakingType",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "stakingAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "LogAddStakingMapping",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "stakingName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "stakingType",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "stakingAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "LogRemoveStakingMapping",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stakingName",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    name: "addStakingMapping",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "connectorsV2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "instaIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stakingName",
        type: "string",
      },
      {
        internalType: "address",
        name: "stakingAddress",
        type: "address",
      },
    ],
    name: "removeStakingMapping",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "stakingMapping",
    outputs: [
      {
        internalType: "address",
        name: "stakingPool",
        type: "address",
      },
      {
        internalType: "address",
        name: "stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bde806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde0314610067578063a07d8bf814610085578063a41098bf146100a7578063de781147146100bc578063e7ed3045146100c4578063fa64d7b9146100d9575b600080fd5b61006f6100ec565b60405161007c919061095f565b60405180910390f35b610098610093366004610802565b610125565b60405161007c9392919061093c565b6100af610153565b60405161007c9190610928565b6100af61016b565b6100d76100d236600461086a565b610183565b005b6100d76100e736600461081a565b6104d1565b6040518060400160405280601881526020017f5374616b696e672d45524332302d4d617070696e672d7631000000000000000081525081565b6000602081905290815260409020805460018201546002909201546001600160a01b03918216928216911683565b732971adfa57b20e5a416ae5a708a8655a9c74f72381565b7397b0b3a8bdefe8cb9563a3c610019ad10db8ad1181565b6040516335882b5760e11b81527397b0b3a8bdefe8cb9563a3c610019ad10db8ad1190636b1056ae906101ba903390600401610928565b60206040518083038186803b1580156101d257600080fd5b505afa1580156101e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020a91906107e2565b806102aa5750336001600160a01b0316732971adfa57b20e5a416ae5a708a8655a9c74f7236001600160a01b031663ee97f7f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561026757600080fd5b505afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906107bf565b6001600160a01b0316145b6102cf5760405162461bcd60e51b81526004016102c690610a90565b60405180910390fd5b6001600160a01b0383166102f55760405162461bcd60e51b81526004016102c690610a59565b6001600160a01b03821661031b5760405162461bcd60e51b81526004016102c690610b60565b6001600160a01b0381166103415760405162461bcd60e51b81526004016102c690610b01565b6020845111156103635760405162461bcd60e51b81526004016102c690610ab3565b600061036e8561071e565b6000818152602081905260409020549091506001600160a01b0316156103a65760405162461bcd60e51b81526004016102c690610a22565b6000818152602081905260409020600101546001600160a01b0316156103de5760405162461bcd60e51b81526004016102c6906109b4565b6000818152602081905260409020600201546001600160a01b0316156104165760405162461bcd60e51b81526004016102c6906109eb565b604080516060810182526001600160a01b038087168252858116602080840191825286831684860190815260008781529182905290859020935184549084166001600160a01b031991821617855591516001850180549185169184169190911790555160029093018054939092169216919091179055517fe750b8bf287fa048454b853286ca02034589f103ca551ed43f23a888fa0e90ec906104c29087908490889088908890610972565b60405180910390a15050505050565b6040516335882b5760e11b81527397b0b3a8bdefe8cb9563a3c610019ad10db8ad1190636b1056ae90610508903390600401610928565b60206040518083038186803b15801561052057600080fd5b505afa158015610534573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055891906107e2565b806105f85750336001600160a01b0316732971adfa57b20e5a416ae5a708a8655a9c74f7236001600160a01b031663ee97f7f36040518163ffffffff1660e01b815260040160206040518083038186803b1580156105b557600080fd5b505afa1580156105c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ed91906107bf565b6001600160a01b0316145b6106145760405162461bcd60e51b81526004016102c690610a90565b6001600160a01b03811661063a5760405162461bcd60e51b81526004016102c690610a59565b60006106458361071e565b6000818152602081905260409020549091506001600160a01b038381169116146106815760405162461bcd60e51b81526004016102c690610b30565b60008181526020819052604090819020600181015460029091015491517fadea5338bd17864da95bb78a0b1fdba912090dfd6769e4674675d0d5fd32e382926106de928792869288926001600160a01b0390811692911690610972565b60405180910390a1600090815260208190526040902080546001600160a01b03199081168255600182018054821690556002909101805490911690555050565b60008151600014156107425760405162461bcd60e51b81526004016102c690610adb565b506020015190565b600082601f83011261075a578081fd5b813567ffffffffffffffff8082111561076f57fe5b604051601f8301601f19168101602001828111828210171561078d57fe5b6040528281528483016020018610156107a4578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156107d0578081fd5b81516107db81610b90565b9392505050565b6000602082840312156107f3578081fd5b815180151581146107db578182fd5b600060208284031215610813578081fd5b5035919050565b6000806040838503121561082c578081fd5b823567ffffffffffffffff811115610842578182fd5b61084e8582860161074a565b925050602083013561085f81610b90565b809150509250929050565b6000806000806080858703121561087f578182fd5b843567ffffffffffffffff811115610895578283fd5b6108a18782880161074a565b94505060208501356108b281610b90565b925060408501356108c281610b90565b915060608501356108d281610b90565b939692955090935050565b60008151808452815b81811015610902576020818501810151868301820152016108e6565b818111156109135782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000602082526107db60208301846108dd565b600060a0825261098560a08301886108dd565b6020830196909652506001600160a01b0393841660408201529183166060830152909116608090910152919050565b6020808252601a908201527f5374616b696e67546f6b656e2d616c72656164792d6164646564000000000000604082015260600190565b60208082526019908201527f726577617264546f6b656e2d616c72656164792d616464656400000000000000604082015260600190565b60208082526019908201527f5374616b696e67506f6f6c2d616c72656164792d616464656400000000000000604082015260600190565b60208082526018908201527f7374616b696e67416464726573732d6e6f742d7661696c640000000000000000604082015260600190565b6020808252600990820152683737ba16a1b434b2b360b91b604082015260600190565b6020808252600e908201526d4c656e6774682d6578636565647360901b604082015260600190565b6020808252600c908201526b537472696e672d456d70747960a01b604082015260600190565b6020808252601590820152741c995dd85c99151bdad95b8b5b9bdd0b5d985a5b19605a1b604082015260600190565b602080825260169082015275191a5999995c995b9d0b5cdd185ada5b99cb5c1bdbdb60521b604082015260600190565b6020808252601690820152751cdd185ada5b99d51bdad95b8b5b9bdd0b5d985a5b1960521b604082015260600190565b6001600160a01b0381168114610ba557600080fd5b5056fea2646970667358221220dcedd0fc03b295d6dfca8bc327daf07722662c47db8c0364cef720844d8e41c464736f6c63430007060033";

type InstaStakingERC20MappingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InstaStakingERC20MappingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InstaStakingERC20Mapping__factory extends ContractFactory {
  constructor(...args: InstaStakingERC20MappingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<InstaStakingERC20Mapping> {
    return super.deploy(overrides || {}) as Promise<InstaStakingERC20Mapping>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): InstaStakingERC20Mapping {
    return super.attach(address) as InstaStakingERC20Mapping;
  }
  connect(signer: Signer): InstaStakingERC20Mapping__factory {
    return super.connect(signer) as InstaStakingERC20Mapping__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InstaStakingERC20MappingInterface {
    return new utils.Interface(_abi) as InstaStakingERC20MappingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InstaStakingERC20Mapping {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as InstaStakingERC20Mapping;
  }
}
