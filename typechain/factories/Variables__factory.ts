/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Variables, VariablesInterface } from "../Variables";

const _abi = [
  {
    inputs: [],
    name: "instaPool",
    outputs: [
      {
        internalType: "contract InstaFlashV2Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a98061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ab4cf22614602d575b600080fd5b60336047565b604051603e9190605f565b60405180910390f35b739686ce6ad5c3f7b212caf401b928c4bb3422e7ba81565b6001600160a01b039190911681526020019056fea264697066735822122076f24f38abd56b4f89e9d43d85fab4c6fbc3fb684c229315ae746d726bde572064736f6c63430007060033";

type VariablesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VariablesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Variables__factory extends ContractFactory {
  constructor(...args: VariablesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Variables> {
    return super.deploy(overrides || {}) as Promise<Variables>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Variables {
    return super.attach(address) as Variables;
  }
  connect(signer: Signer): Variables__factory {
    return super.connect(signer) as Variables__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VariablesInterface {
    return new utils.Interface(_abi) as VariablesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Variables {
    return new Contract(address, _abi, signerOrProvider) as Variables;
  }
}
