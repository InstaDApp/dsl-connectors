/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectGelato, ConnectGelatoInterface } from "../ConnectGelato";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "userProxy",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "address",
                name: "module",
                type: "address",
              },
            ],
            internalType: "struct Provider",
            name: "provider",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "inst",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Condition[]",
                name: "conditions",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                  {
                    internalType: "enum Operation",
                    name: "operation",
                    type: "uint8",
                  },
                  {
                    internalType: "enum DataFlow",
                    name: "dataFlow",
                    type: "uint8",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "bool",
                    name: "termsOkCheck",
                    type: "bool",
                  },
                ],
                internalType: "struct Action[]",
                name: "actions",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasPriceCeil",
                type: "uint256",
              },
            ],
            internalType: "struct Task[]",
            name: "tasks",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "expiryDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cycleId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "submissionsLeft",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct TaskReceipt[]",
        name: "taskReceipt",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogMultiCancelTasks",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct TaskSpec[]",
        name: "taskspecs",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "modules",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethToDeposit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogMultiProvide",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct TaskSpec[]",
        name: "taskspecs",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "modules",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethToWithdraw",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogMultiUnprovide",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        indexed: true,
        internalType: "struct Provider",
        name: "provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct Task",
        name: "task",
        type: "tuple",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogSubmitTask",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        indexed: true,
        internalType: "struct Provider",
        name: "provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct Task[]",
        name: "tasks",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogSubmitTaskChain",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        indexed: true,
        internalType: "struct Provider",
        name: "provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct Task[]",
        name: "tasks",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogSubmitTaskCycle",
    type: "event",
  },
  {
    inputs: [],
    name: "connectorID",
    outputs: [
      {
        internalType: "uint256",
        name: "_type",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "userProxy",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "address",
                name: "module",
                type: "address",
              },
            ],
            internalType: "struct Provider",
            name: "provider",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "inst",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Condition[]",
                name: "conditions",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                  {
                    internalType: "enum Operation",
                    name: "operation",
                    type: "uint8",
                  },
                  {
                    internalType: "enum DataFlow",
                    name: "dataFlow",
                    type: "uint8",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "bool",
                    name: "termsOkCheck",
                    type: "bool",
                  },
                ],
                internalType: "struct Action[]",
                name: "actions",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasPriceCeil",
                type: "uint256",
              },
            ],
            internalType: "struct Task[]",
            name: "tasks",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "expiryDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cycleId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "submissionsLeft",
            type: "uint256",
          },
        ],
        internalType: "struct TaskReceipt[]",
        name: "_taskReceipts",
        type: "tuple[]",
      },
    ],
    name: "multiCancelTasks",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_executor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct TaskSpec[]",
        name: "_taskSpecs",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "_modules",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_ethToDeposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_setId",
        type: "uint256",
      },
    ],
    name: "multiProvide",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_withdrawAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct TaskSpec[]",
        name: "_taskSpecs",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "_modules",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_setId",
        type: "uint256",
      },
    ],
    name: "multiUnprovide",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        internalType: "struct Provider",
        name: "_provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct Task",
        name: "_task",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_expiryDate",
        type: "uint256",
      },
    ],
    name: "submitTask",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        internalType: "struct Provider",
        name: "_provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct Task[]",
        name: "_tasks",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_expiryDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sumOfRequestedTaskSubmits",
        type: "uint256",
      },
    ],
    name: "submitTaskChain",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        internalType: "struct Provider",
        name: "_provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct Task[]",
        name: "_tasks",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_expiryDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_cycles",
        type: "uint256",
      },
    ],
    name: "submitTaskCycle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600b60808190526a047656c61746f2d76312e360ac1b60a09081526200002e916000919062000043565b503480156200003c57600080fd5b50620000ef565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200007b5760008555620000c6565b82601f106200009657805160ff1916838001178555620000c6565b82800160010185558215620000c6579182015b82811115620000c6578251825591602001919060010190620000a9565b50620000d4929150620000d8565b5090565b5b80821115620000d45760008155600101620000d9565b6115d780620000ff6000396000f3fe60806040526004361061007b5760003560e01c80636cd3d8981161004e5780636cd3d898146100e6578063b348e268146100f9578063eb15f7811461010c578063ff92b1a81461012f5761007b565b8063025264901461008057806306fdde03146100955780632738a788146100c05780633e75a9a8146100d3575b600080fd5b61009361008e366004610a49565b610142565b005b3480156100a157600080fd5b506100aa61021f565b6040516100b791906113b0565b60405180910390f35b6100936100ce366004610b20565b6102ad565b6100936100e1366004610a09565b6103b8565b6100936100f4366004610974565b610475565b610093610107366004610a49565b61058e565b34801561011857600080fd5b5061012161065c565b6040516100b79291906113a2565b61009361013d366004610aad565b610664565b61014a610739565b6001600160a01b0316630252649086868686866040518663ffffffff1660e01b815260040161017d959493929190611403565b600060405180830381600087803b15801561019757600080fd5b505af11580156101ab573d6000803e3d6000fd5b505050508184846040516101c092919061125c565b6040518091039020866040516101d69190611269565b60405180910390207f6e618ca93d8007a3bb048d87cc0e7bf12bddc6ca3e336c153890bc0b6f66e9f66000806040516102109291906113a2565b60405180910390a45050505050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102a55780601f1061027a576101008083540402835291602001916102a5565b820191906000526020600020905b81548152906001019060200180831161028857829003601f168201915b505050505081565b60006102b98389610751565b9050476102c4610739565b6001600160a01b031663b300f752838a8a8a8a6040518663ffffffff1660e01b81526004016102f7959493929190611471565b600060405180830381600087803b15801561031157600080fd5b505af1158015610325573d6000803e3d6000fd5b50505050600061033547836107ec565b905061034184826107f8565b868660405161035192919061113b565b604051809103902089896040516103699291906111f5565b60405180910390207fc44585ae385fe053d798d56dc20dc0f0beade803098d105d289637d878fa9c7b8388886040516103a49392919061148b565b60405180910390a350505050505050505050565b6103c0610739565b6001600160a01b0316633e75a9a883836040518363ffffffff1660e01b81526004016103ed9291906112ce565b600060405180830381600087803b15801561040757600080fd5b505af115801561041b573d6000803e3d6000fd5b50505050818160405161042f929190611150565b60405180910390207fb42519a7cf5f104a27b62b10dc1e67721be4b68791899606dd15e1b017bd96316000806040516104699291906113a2565b60405180910390a25050565b60006104818385610751565b905060001981146104925780610494565b475b905061049e610739565b6001600160a01b0316639aad3798828b8b8b8b8b6040518763ffffffff1660e01b81526004016104d295949392919061128a565b6000604051808303818588803b1580156104eb57600080fd5b505af11580156104ff573d6000803e3d6000fd5b505050505061050e82826107f8565b858560405161051e92919061113b565b604051809103902088886040516105369291906111f5565b60405180910390208a6001600160a01b03167f1e9ff70996f352b5b70751209e03ae367633703bfc74ccc966b87e70ab57136184878760405161057b9392919061148b565b60405180910390a4505050505050505050565b610596610739565b6001600160a01b031663b348e26886868686866040518663ffffffff1660e01b81526004016105c9959493929190611403565b600060405180830381600087803b1580156105e357600080fd5b505af11580156105f7573d6000803e3d6000fd5b5050505081848460405161060c92919061125c565b6040518091039020866040516106229190611269565b60405180910390207f9e2ce841f586026d01f4cdb7bcd28c46154ba65e6766033fee248e3690c35a0d6000806040516102109291906113a2565b600190602a90565b61066c610739565b6001600160a01b031663ff92b1a88484846040518463ffffffff1660e01b815260040161069b93929190611438565b600060405180830381600087803b1580156106b557600080fd5b505af11580156106c9573d6000803e3d6000fd5b5050505080826040516106dc919061127e565b6040518091039020846040516106f29190611269565b60405180910390207f054a2512b2e1ba381f3ca2abbf5515644385116f44cf8d635382f6df3f41055760008060405161072c9291906113a2565b60405180910390a4505050565b731d681d76ce96e4d70a88a00ebbcfc1e47808d0b890565b600082156107e35761076161086a565b6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040161078c9190611468565b602060405180830381600087803b1580156107a657600080fd5b505af11580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610b08565b6107e5565b815b9392505050565b60006107e58383610882565b81156108665761080661086a565b6001600160a01b03166361e3c94483836040518363ffffffff1660e01b81526004016108339291906113a2565b600060405180830381600087803b15801561084d57600080fd5b505af1158015610861573d6000803e3d6000fd5b505050505b5050565b738a5419cfc711b2343c17a6abf4b2bafabb06957f90565b6000828211156108d9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b80356001600160a01b03811681146108f657600080fd5b919050565b60008083601f84011261090c578182fd5b50813567ffffffffffffffff811115610923578182fd5b602083019150836020808302850101111561093d57600080fd5b9250929050565b803580151581146108f657600080fd5b8035600481106108f657600080fd5b6000604082840312156107e3578081fd5b60008060008060008060008060c0898b03121561098f578384fd5b610998896108df565b9750602089013567ffffffffffffffff808211156109b4578586fd5b6109c08c838d016108fb565b909950975060408b01359150808211156109d8578586fd5b506109e58b828c016108fb565b999c989b5096999698976060880135976080810135975060a0013595509350505050565b60008060208385031215610a1b578182fd5b823567ffffffffffffffff811115610a31578283fd5b610a3d858286016108fb565b90969095509350505050565b600080600080600060a08688031215610a60578081fd5b610a6a8787610963565b9450604086013567ffffffffffffffff811115610a85578182fd5b610a91888289016108fb565b9699909850959660608101359660809091013595509350505050565b600080600060808486031215610ac1578283fd5b610acb8585610963565b9250604084013567ffffffffffffffff811115610ae6578283fd5b840160808187031215610af7578283fd5b929592945050506060919091013590565b600060208284031215610b19578081fd5b5051919050565b600080600080600080600060a0888a031215610b3a578283fd5b87359650602088013567ffffffffffffffff80821115610b58578485fd5b610b648b838c016108fb565b909850965060408a0135915080821115610b7c578485fd5b50610b898a828b016108fb565b989b979a5095989597966060870135966080013595509350505050565b6001600160a01b0316815260200190565b1515815260200190565b6000610bcd8383610f7d565b505060200190565b815260200190565b6001600160a01b03169052565b60008284526020808501945082825b85811015610c25576001600160a01b03610c12836108df565b1687529582019590820190600101610bf9565b509495945050505050565b600081815b84811015610c64576001600160a01b03610c4e836108df565b1686526020958601959190910190600101610c35565b5093949350505050565b818352602080840193600091908185020181018584845b87811015610d48578284038952610c9c828861152e565b60c06001600160a01b03610caf836108df565b168652610cbe878301836114e9565b8289890152610cd08389018284610f3d565b9250505060408083013560028110610ce657898afd5b610cf282890182610f8b565b50506060610d01818401610954565b610d0d82890182610f7d565b50506080828101359087015260a0610d26818401610944565b9250610d3481880184610f37565b509986019994505090840190600101610c85565b5091979650505050505050565b600081815b84811015610c6457610d6c828561152e565b610d7e87610d79836108df565b610ba6565b6020610d8c818401846114e9565b610d97848284610f67565b93505050604083013560028110610dac578687fd5b610db68382610f8b565b50606083013560048110610dc8578687fd5b610df5610de4610dda84860184610bc1565b6080870135610bd5565b610df060a08701610944565b610bb7565b99505093909301925050600101610d5a565b818352602080840193600091908185020181018584845b87811015610d48578284038952610e358288611577565b6060808601610e4483846114a1565b92885290829052608087019189905b80821015610e7a57610e6884610d79856108df565b93508983019250600182019150610e53565b505050610e89878301836114a1565b87830389890152610e9b838284610c6e565b6040948501359890940197909752505098850198935090840190600101610e1e565b818352602080840193600091908185020181018584845b87811015610d48578284038952610ef484610eef848a61158c565b610fc2565b98850198935090840190600101610ed4565b600081815b84811015610c6457610f2686610f21848761158c565b61109a565b955060209190910190600101610f0b565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828285378383015250601f01601f19160190565b60048110610f8757fe5b9052565b60028110610f8757fe5b6001600160a01b0380610fa7836108df565b16835280610fb7602084016108df565b166020840152505050565b600060808301610fd283846114a1565b608086529182905260209160a08087019084830288010183865b8481101561105257898303609f19018452611007828761154c565b60406001600160a01b0361101a836108df565b168552611029898301836114e9565b9250818a87015261103d8287018483610f3d565b968a0196955050509187019150600101610fec565b5050611060858801886114a1565b9450925087810385890152611076818585610c6e565b94505050505060408301356040850152606083013560608501528091505092915050565b60006110a682836114a1565b8482845b838110156110fe576110bc828661154c565b6001600160a01b036110cd826108df565b16845260206110de818301836114e9565b92506110ed8287018483610f67565b9550509290920191506001016110aa565b505061110d60208601866114a1565b9350915061111c818484610d55565b6040868101358252606090960135602082015290940195945050505050565b6000611148828486610c30565b949350505050565b60008184825b858110156111ea576111688288611561565b80358452602061117f818601610d798385016108df565b604061118d82828601610f95565b6080840135908201526111a360a08401846114a1565b6111d96111ce6111c46111ba606087018587610f06565b60c0890135610bd5565b60e0880135610bd5565b610100870135610bd5565b975050509301925050600101611156565b509095945050505050565b60008184825b858110156111ea5761120d8288611577565b61121781826114a1565b611222868284610c30565b9150506020611233818401846114a1565b61123e848284610d55565b604095909501358552505091820194505091909101906001016111fb565b6000611148828486610f06565b60006112758284610f95565b50604001919050565b60006107e5828461109a565b6001600160a01b03861681526060602082018190526000906112af9083018688610e07565b82810360408401526112c2818587610bea565b98975050505050505050565b602080825281810183905260009060408084018583028501820187855b8881101561139457878303603f19018452611306828b611561565b610120813585526113188883016108df565b61132489870182610bdd565b50611333878601888401610f95565b6080828101359086015260a061134b818401846114a1565b838389015261135d8489018284610ebd565b60c086810135908a015260e080870135908a01526101009586013595909801949094525050509386019350908501906001016112eb565b509098975050505050505050565b918252602082015260400190565b6000602080835283518082850152825b818110156113dc578581018301518582016040015282016113c0565b818111156113ed5783604083870101525b50601f01601f1916929092016040019392505050565b600061140f8288610f95565b60a0604083015261142460a083018688610ebd565b606083019490945250608001529392505050565b60006114448286610f95565b608060408301526114586080830185610fc2565b9050826060830152949350505050565b90815260200190565b6000868252606060208301526112af606083018688610e07565b9283526020830191909152604082015260600190565b6000808335601e198436030181126114b7578283fd5b830160208101925035905067ffffffffffffffff8111156114d757600080fd5b60208102360383131561093d57600080fd5b6000808335601e198436030181126114ff578283fd5b830160208101925035905067ffffffffffffffff81111561151f57600080fd5b80360383131561093d57600080fd5b6000823560be19833603018112611543578182fd5b90910192915050565b60008235603e19833603018112611543578182fd5b6000823561011e19833603018112611543578182fd5b60008235605e19833603018112611543578182fd5b60008235607e19833603018112611543578182fdfea264697066735822122075dcc746bfa0e12f923f52bfaee61678c8022ea8a9b674d6f23edaaf8a72eaa764736f6c63430007060033";

type ConnectGelatoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectGelatoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectGelato__factory extends ContractFactory {
  constructor(...args: ConnectGelatoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectGelato> {
    return super.deploy(overrides || {}) as Promise<ConnectGelato>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectGelato {
    return super.attach(address) as ConnectGelato;
  }
  connect(signer: Signer): ConnectGelato__factory {
    return super.connect(signer) as ConnectGelato__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectGelatoInterface {
    return new utils.Interface(_abi) as ConnectGelatoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectGelato {
    return new Contract(address, _abi, signerOrProvider) as ConnectGelato;
  }
}
