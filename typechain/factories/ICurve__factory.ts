/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ICurve, ICurveInterface } from "../ICurve";

const _abi = [
  {
    inputs: [
      {
        internalType: "int128",
        name: "sellTokenId",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "buyTokenId",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "sellTokenAmt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBuyToken",
        type: "uint256",
      },
    ],
    name: "exchange",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "sellTokenId",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "buyTokenId",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "sellTokenAmt",
        type: "uint256",
      },
    ],
    name: "get_dy",
    outputs: [
      {
        internalType: "uint256",
        name: "buyTokenAmt",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "tokenId",
        type: "int128",
      },
    ],
    name: "underlying_coins",
    outputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ICurve__factory {
  static readonly abi = _abi;
  static createInterface(): ICurveInterface {
    return new utils.Interface(_abi) as ICurveInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ICurve {
    return new Contract(address, _abi, signerOrProvider) as ICurve;
  }
}
