/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  GAaveProtectionResolver,
  GAaveProtectionResolverInterface,
} from "../GAaveProtectionResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dsa",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "LogCancelAndRevoke",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dsa",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "action",
        type: "address",
      },
    ],
    name: "LogCancelProtection",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dsa",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "action",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wantedHealthFactor",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minimumHealthFactor",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPermanent",
        type: "bool",
      },
    ],
    name: "LogSubmitProtection",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dsa",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "action",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wantedHealthFactor",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minimumHealthFactor",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPermanent",
        type: "bool",
      },
    ],
    name: "LogUpdateProtection",
    type: "event",
  },
  {
    inputs: [],
    name: "cancelAndRevoke",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "cancelProtection",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_wantedHealthFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minimumHealthFactor",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isPermanent",
        type: "bool",
      },
    ],
    name: "submitProtection",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_wantedHealthFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minimumHealthFactor",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_isPermanent",
        type: "bool",
      },
    ],
    name: "updateProtection",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class GAaveProtectionResolver__factory {
  static readonly abi = _abi;
  static createInterface(): GAaveProtectionResolverInterface {
    return new utils.Interface(_abi) as GAaveProtectionResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GAaveProtectionResolver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as GAaveProtectionResolver;
  }
}
