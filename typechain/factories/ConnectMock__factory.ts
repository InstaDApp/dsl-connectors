/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ConnectMock, ConnectMockInterface } from "../ConnectMock";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "mockOne",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "mockTwo",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogMock",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "mockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "mockFunction",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260076080819052664d6f636b2d763160c81b60a0908152610028916000919061003b565b5034801561003557600080fd5b506100dc565b828054600181600116156101000203166002900490600052602060002090601f01602090048101928261007157600085556100b7565b82601f1061008a57805160ff19168380011785556100b7565b828001600101855582156100b7579182015b828111156100b757825182559160200191906001019061009c565b506100c39291506100c7565b5090565b5b808211156100c357600081556001016100c8565b610338806100eb6000396000f3fe6080604052600436106100295760003560e01c806306fdde031461002e578063e024f58e146100b8575b600080fd5b34801561003a57600080fd5b506100436100e3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561007d578181015183820152602001610065565b50505050905090810190601f1680156100aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100e1600480360360608110156100ce57600080fd5b5080359060208101359060400135610171565b005b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156101695780601f1061013e57610100808354040283529160200191610169565b820191906000526020600020905b81548152906001019060200180831161014c57829003601f168201915b505050505081565b600061017d83856101e9565b9050600019811461018e5783610190565b475b905061019c8285610285565b60408051858152602081018390528082018590526060810184905290517f6d5dc14c2cd6c6f670d7abc174b99759e084f2de0dc733bc11457b98ed4f59189181900360800190a150505050565b6000821561027c57738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561024b57600080fd5b505af115801561025f573d6000803e3d6000fd5b505050506040513d602081101561027557600080fd5b505161027e565b815b9392505050565b81156102fe5760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505050505b505056fea2646970667358221220af3345953f83f9b27a4ace9d5eece7caa84a0c2bc921b97ed3a52229b2f4eb0064736f6c63430007060033";

type ConnectMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectMock__factory extends ContractFactory {
  constructor(...args: ConnectMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectMock> {
    return super.deploy(overrides || {}) as Promise<ConnectMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectMock {
    return super.attach(address) as ConnectMock;
  }
  connect(signer: Signer): ConnectMock__factory {
    return super.connect(signer) as ConnectMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectMockInterface {
    return new utils.Interface(_abi) as ConnectMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectMock {
    return new Contract(address, _abi, signerOrProvider) as ConnectMock;
  }
}
