/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConnectV2Gelato,
  ConnectV2GelatoInterface,
} from "../ConnectV2Gelato";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "userProxy",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "address",
                name: "module",
                type: "address",
              },
            ],
            internalType: "struct Provider",
            name: "provider",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "inst",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Condition[]",
                name: "conditions",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                  {
                    internalType: "enum Operation",
                    name: "operation",
                    type: "uint8",
                  },
                  {
                    internalType: "enum DataFlow",
                    name: "dataFlow",
                    type: "uint8",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "bool",
                    name: "termsOkCheck",
                    type: "bool",
                  },
                ],
                internalType: "struct Action[]",
                name: "actions",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasPriceCeil",
                type: "uint256",
              },
            ],
            internalType: "struct Task[]",
            name: "tasks",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "expiryDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cycleId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "submissionsLeft",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct TaskReceipt[]",
        name: "taskReceipt",
        type: "tuple[]",
      },
    ],
    name: "LogMultiCancelTasks",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "executor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct TaskSpec[]",
        name: "taskspecs",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "modules",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethToDeposit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogMultiProvide",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct TaskSpec[]",
        name: "taskspecs",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "modules",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ethToWithdraw",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "getId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "setId",
        type: "uint256",
      },
    ],
    name: "LogMultiUnprovide",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        indexed: true,
        internalType: "struct Provider",
        name: "provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct Task",
        name: "task",
        type: "tuple",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
    ],
    name: "LogSubmitTask",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        indexed: true,
        internalType: "struct Provider",
        name: "provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct Task[]",
        name: "tasks",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
    ],
    name: "LogSubmitTaskChain",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        indexed: true,
        internalType: "struct Provider",
        name: "provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct Task[]",
        name: "tasks",
        type: "tuple[]",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "expiryDate",
        type: "uint256",
      },
    ],
    name: "LogSubmitTaskCycle",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "userProxy",
            type: "address",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "address",
                name: "module",
                type: "address",
              },
            ],
            internalType: "struct Provider",
            name: "provider",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "index",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "inst",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Condition[]",
                name: "conditions",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "addr",
                    type: "address",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                  {
                    internalType: "enum Operation",
                    name: "operation",
                    type: "uint8",
                  },
                  {
                    internalType: "enum DataFlow",
                    name: "dataFlow",
                    type: "uint8",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "bool",
                    name: "termsOkCheck",
                    type: "bool",
                  },
                ],
                internalType: "struct Action[]",
                name: "actions",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasLimit",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "selfProviderGasPriceCeil",
                type: "uint256",
              },
            ],
            internalType: "struct Task[]",
            name: "tasks",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "expiryDate",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "cycleId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "submissionsLeft",
            type: "uint256",
          },
        ],
        internalType: "struct TaskReceipt[]",
        name: "_taskReceipts",
        type: "tuple[]",
      },
    ],
    name: "multiCancelTasks",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_executor",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct TaskSpec[]",
        name: "_taskSpecs",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "_modules",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_ethToDeposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_setId",
        type: "uint256",
      },
    ],
    name: "multiProvide",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_withdrawAmount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "conditions",
            type: "address[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "gasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct TaskSpec[]",
        name: "_taskSpecs",
        type: "tuple[]",
      },
      {
        internalType: "address[]",
        name: "_modules",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_getId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_setId",
        type: "uint256",
      },
    ],
    name: "multiUnprovide",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        internalType: "struct Provider",
        name: "_provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct Task",
        name: "_task",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "_expiryDate",
        type: "uint256",
      },
    ],
    name: "submitTask",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        internalType: "struct Provider",
        name: "_provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct Task[]",
        name: "_tasks",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_expiryDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_sumOfRequestedTaskSubmits",
        type: "uint256",
      },
    ],
    name: "submitTaskChain",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "addr",
            type: "address",
          },
          {
            internalType: "address",
            name: "module",
            type: "address",
          },
        ],
        internalType: "struct Provider",
        name: "_provider",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "inst",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Condition[]",
            name: "conditions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "address",
                name: "addr",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                internalType: "enum Operation",
                name: "operation",
                type: "uint8",
              },
              {
                internalType: "enum DataFlow",
                name: "dataFlow",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "termsOkCheck",
                type: "bool",
              },
            ],
            internalType: "struct Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "selfProviderGasPriceCeil",
            type: "uint256",
          },
        ],
        internalType: "struct Task[]",
        name: "_tasks",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "_expiryDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_cycles",
        type: "uint256",
      },
    ],
    name: "submitTaskCycle",
    outputs: [
      {
        internalType: "string",
        name: "_eventName",
        type: "string",
      },
      {
        internalType: "bytes",
        name: "_eventParam",
        type: "bytes",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60c0604052600960808190526847656c61746f2d763160b81b60a09081526200002c916000919062000041565b503480156200003a57600080fd5b50620000ed565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620000795760008555620000c4565b82601f106200009457805160ff1916838001178555620000c4565b82800160010185558215620000c4579182015b82811115620000c4578251825591602001919060010190620000a7565b50620000d2929150620000d6565b5090565b5b80821115620000d25760008155600101620000d7565b61135d80620000fd6000396000f3fe6080604052600436106100705760003560e01c80633e75a9a81161004e5780633e75a9a8146100d45780636cd3d898146100e7578063b348e268146100fa578063ff92b1a81461010d57610070565b8063025264901461007557806306fdde031461009f5780632738a788146100c1575b600080fd5b610088610083366004610968565b610120565b60405161009692919061109b565b60405180910390f35b3480156100ab57600080fd5b506100b46101e2565b6040516100969190611088565b6100886100cf366004610a27565b610270565b6100886100e2366004610928565b610365565b6100886100f5366004610893565b61041b565b610088610108366004610968565b610516565b61008861011b3660046109cc565b6105be565b6040516225264960e41b81526060908190731d681d76ce96e4d70a88a00ebbcfc1e47808d0b890630252649090610163908a908a908a908a908a906004016110fb565b600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050506040518060600160405280602b8152602001611255602b91399150868686866040516020016101c794939291906110c9565b60405160208183030381529060405290509550959350505050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102685780601f1061023d57610100808354040283529160200191610268565b820191906000526020600020905b81548152906001019060200180831161024b57829003601f168201915b505050505081565b606080600061027f858b61067c565b6040516359807ba960e11b81529091504790731d681d76ce96e4d70a88a00ebbcfc1e47808d0b89063b300f752906102c39085908e908e908e908e90600401611160565b600060405180830381600087803b1580156102dd57600080fd5b505af11580156102f1573d6000803e3d6000fd5b5050505060006103014783610718565b905061030d8682610724565b6040518060600160405280603f81526020016112e9603f913994508a8a8a8a848b8b6040516020016103459796959493929190611041565b604051602081830303815290604052935050505097509795505050505050565b6040516307ceb53560e31b81526060908190731d681d76ce96e4d70a88a00ebbcfc1e47808d0b890633e75a9a8906103a39087908790600401610f60565b600060405180830381600087803b1580156103bd57600080fd5b505af11580156103d1573d6000803e3d6000fd5b505050506040518060600160405280602281526020016112336022913991508383604051602001610403929190610f60565b60405160208183030381529060405290509250929050565b606080600061042a858761067c565b9050600019811461043b578061043d565b475b604051631355a6f360e31b8152909150731d681d76ce96e4d70a88a00ebbcfc1e47808d0b890639aad3798908390610481908f908f908f908f908f90600401610ec3565b6000604051808303818588803b15801561049a57600080fd5b505af11580156104ae573d6000803e3d6000fd5b50505050506104bd8482610724565b6040518060800160405280604581526020016112806045913992508a8a8a8a8a858a8a6040516020016104f7989796959493929190610f07565b6040516020818303038152906040529150509850989650505050505050565b6040516316691c4d60e31b81526060908190731d681d76ce96e4d70a88a00ebbcfc1e47808d0b89063b348e2689061055a908a908a908a908a908a906004016110fb565b600060405180830381600087803b15801561057457600080fd5b505af1158015610588573d6000803e3d6000fd5b505050506040518060600160405280602b8152602001611208602b91399150868686866040516020016101c794939291906110c9565b6040516001620da9cb60e31b031981526060908190731d681d76ce96e4d70a88a00ebbcfc1e47808d0b89063ff92b1a89061060190889088908890600401611130565b600060405180830381600087803b15801561061b57600080fd5b505af115801561062f573d6000803e3d6000fd5b505050506040518060600160405280602481526020016112c560249139915084848460405160200161066393929190611130565b6040516020818303038152906040529050935093915050565b6000821561070f57738a5419cfc711b2343c17a6abf4b2bafabb06957f6001600160a01b031663a9c70eaa846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156106de57600080fd5b505af11580156106f2573d6000803e3d6000fd5b505050506040513d602081101561070857600080fd5b5051610711565b815b9392505050565b600061071183836107a1565b811561079d5760408051631878f25160e21b815260048101849052602481018390529051738a5419cfc711b2343c17a6abf4b2bafabb06957f916361e3c94491604480830192600092919082900301818387803b15801561078457600080fd5b505af1158015610798573d6000803e3d6000fd5b505050505b5050565b6000828211156107f8576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b80356001600160a01b038116811461081557600080fd5b919050565b60008083601f84011261082b578182fd5b50813567ffffffffffffffff811115610842578182fd5b602083019150836020808302850101111561085c57600080fd5b9250929050565b8035801515811461081557600080fd5b80356004811061081557600080fd5b60006040828403121561070f578081fd5b60008060008060008060008060c0898b0312156108ae578384fd5b6108b7896107fe565b9750602089013567ffffffffffffffff808211156108d3578586fd5b6108df8c838d0161081a565b909950975060408b01359150808211156108f7578586fd5b506109048b828c0161081a565b999c989b5096999698976060880135976080810135975060a0013595509350505050565b6000806020838503121561093a578182fd5b823567ffffffffffffffff811115610950578283fd5b61095c8582860161081a565b90969095509350505050565b600080600080600060a0868803121561097f578081fd5b6109898787610882565b9450604086013567ffffffffffffffff8111156109a4578182fd5b6109b08882890161081a565b9699909850959660608101359660809091013595509350505050565b6000806000608084860312156109e0578283fd5b6109ea8585610882565b9250604084013567ffffffffffffffff811115610a05578283fd5b840160808187031215610a16578283fd5b929592945050506060919091013590565b600080600080600080600060a0888a031215610a41578283fd5b87359650602088013567ffffffffffffffff80821115610a5f578485fd5b610a6b8b838c0161081a565b909850965060408a0135915080821115610a83578485fd5b50610a908a828b0161081a565b989b979a5095989597966060870135966080013595509350505050565b6001600160a01b0316815260200190565b6001600160a01b03169052565b60008284526020808501945082825b85811015610b06576001600160a01b03610af3836107fe565b1687529582019590820190600101610ada565b509495945050505050565b818352602080840193600091908185020181018584845b87811015610bf6578284038952813560be19883603018112610b48578687fd5b870160c06001600160a01b03610b5d836107fe565b168652610b6c878301836111c2565b8289890152610b7e8389018284610d25565b9250505060408083013560028110610b9457898afd5b610ba082890182610da8565b50506060610baf818401610873565b610bbb82890182610d9a565b50506080828101359087015260a0610bd4818401610863565b9250610be281880184610d1f565b509986019994505090840190600101610b28565b5091979650505050505050565b818352602080840193600091908185020181018584845b87811015610bf65782840389528135605e19883603018112610c3a578687fd5b87016060858101610c4b838061117a565b92885290829052608087019189905b80821015610c8657610c7484610c6f856107fe565b610aad565b93508983019250600182019150610c5a565b505050610c958783018361117a565b87830389890152610ca7838284610b11565b6040948501359890940197909752505098850198935090840190600101610c1a565b818352602080840193600091908185020181018584845b87811015610bf65782840389528135607e19883603018112610d00578687fd5b610d0c85898301610ddf565b9986019994505090840190600101610ce0565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452815b81811015610d7457602081850181015186830182015201610d58565b81811115610d855782602083870101525b50601f01601f19169290920160200192915050565b60048110610da457fe5b9052565b60028110610da457fe5b6001600160a01b0380610dc4836107fe565b16835280610dd4602084016107fe565b166020840152505050565b600060808301610def838461117a565b608086529182905260209160a08087019084830288010183865b84811015610e7b57898303609f19018452813536879003603e19018112610e2e578889fd5b860160406001600160a01b03610e43836107fe565b168552610e52898301836111c2565b9250818a870152610e668287018483610d25565b968a0196955050509187019150600101610e09565b5050610e898588018861117a565b9450925087810385890152610e9f818585610b11565b94505050505060408301356040850152606083013560608501528091505092915050565b6001600160a01b0386168152606060208201819052600090610ee89083018688610c03565b8281036040840152610efb818587610acb565b98975050505050505050565b6001600160a01b038916815260c060208201819052600090610f2c908301898b610c03565b8281036040840152610f3f81888a610acb565b60608401969096525050608081019290925260a09091015295945050505050565b602080825281810183905260009060408084018583028501820187855b8881101561103357878303603f190184528135368b900361011e19018112610fa3578788fd5b8a0180358452610120610fb78883016107fe565b610fc389870182610abe565b50610fd2878601888401610db2565b6080828101359086015260a0610fea8184018461117a565b8383890152610ffc8489018284610cc9565b60c086810135908a015260e080870135908a0152610100958601359590980194909452505050938601935090850190600101610f7d565b509098975050505050505050565b600060a0825261105560a08301898b610c03565b828103602084015261106881888a610acb565b604084019690965250506060810192909252608090910152949350505050565b6000602082526107116020830184610d4f565b6000604082526110ae6040830185610d4f565b82810360208401526110c08185610d4f565b95945050505050565b60006110d58287610db2565b608060408301526110ea608083018587610cc9565b905082606083015295945050505050565b60006111078288610db2565b60a0604083015261111c60a083018688610cc9565b606083019490945250608001529392505050565b600061113c8286610db2565b608060408301526111506080830185610ddf565b9050826060830152949350505050565b600086825260606020830152610ee8606083018688610c03565b6000808335601e19843603018112611190578283fd5b830160208101925035905067ffffffffffffffff8111156111b057600080fd5b60208102360383131561085c57600080fd5b6000808335601e198436030181126111d8578283fd5b830160208101925035905067ffffffffffffffff8111156111f857600080fd5b80360383131561085c57600080fdfe4c6f675375626d69745461736b4379636c652850726f76696465722c5461736b5b5d2c75696e74323536294c6f674d756c746943616e63656c5461736b73285461736b526563656970745b5d294c6f675375626d69745461736b436861696e2850726f76696465722c5461736b5b5d2c75696e74323536294c6f674d756c746950726f7669646528616464726573732c5461736b537065635b5d2c616464726573735b5d2c75696e743235362c75696e743235362c75696e74323536294c6f675375626d69745461736b2850726f76696465722c5461736b2c75696e74323536294c6f674d756c7469556e70726f76696465285461736b537065635b5d2c616464726573735b5d2c75696e743235362c75696e743235362c75696e7432353629a2646970667358221220adb193839b99d4e2bf8af8589f2b479421e0f0c554328d3dfe2f5a8537e1c39f64736f6c63430007060033";

type ConnectV2GelatoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConnectV2GelatoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConnectV2Gelato__factory extends ContractFactory {
  constructor(...args: ConnectV2GelatoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConnectV2Gelato> {
    return super.deploy(overrides || {}) as Promise<ConnectV2Gelato>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConnectV2Gelato {
    return super.attach(address) as ConnectV2Gelato;
  }
  connect(signer: Signer): ConnectV2Gelato__factory {
    return super.connect(signer) as ConnectV2Gelato__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConnectV2GelatoInterface {
    return new utils.Interface(_abi) as ConnectV2GelatoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConnectV2Gelato {
    return new Contract(address, _abi, signerOrProvider) as ConnectV2Gelato;
  }
}
