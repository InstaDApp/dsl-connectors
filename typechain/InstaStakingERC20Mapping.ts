/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaStakingERC20MappingInterface extends utils.Interface {
  functions: {
    "addStakingMapping(string,address,address,address)": FunctionFragment;
    "connectorsV2()": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "name()": FunctionFragment;
    "removeStakingMapping(string,address)": FunctionFragment;
    "stakingMapping(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addStakingMapping",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "connectorsV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStakingMapping",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingMapping",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStakingMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "connectorsV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStakingMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingMapping",
    data: BytesLike
  ): Result;

  events: {
    "LogAddStakingMapping(string,bytes32,address,address,address)": EventFragment;
    "LogRemoveStakingMapping(string,bytes32,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogAddStakingMapping"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveStakingMapping"): EventFragment;
}

export type LogAddStakingMappingEvent = TypedEvent<
  [string, string, string, string, string],
  {
    stakingName: string;
    stakingType: string;
    stakingAddress: string;
    stakingToken: string;
    rewardToken: string;
  }
>;

export type LogAddStakingMappingEventFilter =
  TypedEventFilter<LogAddStakingMappingEvent>;

export type LogRemoveStakingMappingEvent = TypedEvent<
  [string, string, string, string, string],
  {
    stakingName: string;
    stakingType: string;
    stakingAddress: string;
    stakingToken: string;
    rewardToken: string;
  }
>;

export type LogRemoveStakingMappingEventFilter =
  TypedEventFilter<LogRemoveStakingMappingEvent>;

export interface InstaStakingERC20Mapping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaStakingERC20MappingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStakingMapping(
      stakingName: string,
      stakingAddress: string,
      stakingToken: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    connectorsV2(overrides?: CallOverrides): Promise<[string]>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    removeStakingMapping(
      stakingName: string,
      stakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        stakingPool: string;
        stakingToken: string;
        rewardToken: string;
      }
    >;
  };

  addStakingMapping(
    stakingName: string,
    stakingAddress: string,
    stakingToken: string,
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  connectorsV2(overrides?: CallOverrides): Promise<string>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  removeStakingMapping(
    stakingName: string,
    stakingAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingMapping(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      stakingPool: string;
      stakingToken: string;
      rewardToken: string;
    }
  >;

  callStatic: {
    addStakingMapping(
      stakingName: string,
      stakingAddress: string,
      stakingToken: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    connectorsV2(overrides?: CallOverrides): Promise<string>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    removeStakingMapping(
      stakingName: string,
      stakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        stakingPool: string;
        stakingToken: string;
        rewardToken: string;
      }
    >;
  };

  filters: {
    "LogAddStakingMapping(string,bytes32,address,address,address)"(
      stakingName?: null,
      stakingType?: null,
      stakingAddress?: null,
      stakingToken?: null,
      rewardToken?: null
    ): LogAddStakingMappingEventFilter;
    LogAddStakingMapping(
      stakingName?: null,
      stakingType?: null,
      stakingAddress?: null,
      stakingToken?: null,
      rewardToken?: null
    ): LogAddStakingMappingEventFilter;

    "LogRemoveStakingMapping(string,bytes32,address,address,address)"(
      stakingName?: null,
      stakingType?: null,
      stakingAddress?: null,
      stakingToken?: null,
      rewardToken?: null
    ): LogRemoveStakingMappingEventFilter;
    LogRemoveStakingMapping(
      stakingName?: null,
      stakingType?: null,
      stakingAddress?: null,
      stakingToken?: null,
      rewardToken?: null
    ): LogRemoveStakingMappingEventFilter;
  };

  estimateGas: {
    addStakingMapping(
      stakingName: string,
      stakingAddress: string,
      stakingToken: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    connectorsV2(overrides?: CallOverrides): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    removeStakingMapping(
      stakingName: string,
      stakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStakingMapping(
      stakingName: string,
      stakingAddress: string,
      stakingToken: string,
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    connectorsV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStakingMapping(
      stakingName: string,
      stakingAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingMapping(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
