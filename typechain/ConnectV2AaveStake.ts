/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ConnectV2AaveStakeInterface extends utils.Interface {
  functions: {
    "claim(uint256,uint256,uint256)": FunctionFragment;
    "cooldown()": FunctionFragment;
    "delegate(address,bool,bool,uint8,uint8)": FunctionFragment;
    "name()": FunctionFragment;
    "redeem(uint256,uint256,uint256)": FunctionFragment;
    "stake(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cooldown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [string, boolean, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cooldown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;

  events: {
    "LogClaim(uint256,uint256,uint256)": EventFragment;
    "LogCooldown()": EventFragment;
    "LogDelegate(address,bool,bool,uint8,uint8)": EventFragment;
    "LogRedeem(uint256,uint256,uint256)": EventFragment;
    "LogStake(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogCooldown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStake"): EventFragment;
}

export type LogClaimEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { amt: BigNumber; getId: BigNumber; setId: BigNumber }
>;

export type LogClaimEventFilter = TypedEventFilter<LogClaimEvent>;

export type LogCooldownEvent = TypedEvent<[], {}>;

export type LogCooldownEventFilter = TypedEventFilter<LogCooldownEvent>;

export type LogDelegateEvent = TypedEvent<
  [string, boolean, boolean, number, number],
  {
    delegatee: string;
    delegateAave: boolean;
    delegateStkAave: boolean;
    aaveDelegationType: number;
    stkAaveDelegationType: number;
  }
>;

export type LogDelegateEventFilter = TypedEventFilter<LogDelegateEvent>;

export type LogRedeemEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { amt: BigNumber; getId: BigNumber; setId: BigNumber }
>;

export type LogRedeemEventFilter = TypedEventFilter<LogRedeemEvent>;

export type LogStakeEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { amt: BigNumber; getId: BigNumber; setId: BigNumber }
>;

export type LogStakeEventFilter = TypedEventFilter<LogStakeEvent>;

export interface ConnectV2AaveStake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConnectV2AaveStakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cooldown(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      delegatee: string,
      delegateAave: boolean,
      delegateStkAave: boolean,
      aaveDelegationType: BigNumberish,
      stkAaveDelegationType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    amount: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cooldown(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    delegatee: string,
    delegateAave: boolean,
    delegateStkAave: boolean,
    aaveDelegationType: BigNumberish,
    stkAaveDelegationType: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  redeem(
    amount: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    cooldown(
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    delegate(
      delegatee: string,
      delegateAave: boolean,
      delegateStkAave: boolean,
      aaveDelegationType: BigNumberish,
      stkAaveDelegationType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    name(overrides?: CallOverrides): Promise<string>;

    redeem(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    stake(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogClaim(uint256,uint256,uint256)"(
      amt?: null,
      getId?: null,
      setId?: null
    ): LogClaimEventFilter;
    LogClaim(amt?: null, getId?: null, setId?: null): LogClaimEventFilter;

    "LogCooldown()"(): LogCooldownEventFilter;
    LogCooldown(): LogCooldownEventFilter;

    "LogDelegate(address,bool,bool,uint8,uint8)"(
      delegatee?: null,
      delegateAave?: null,
      delegateStkAave?: null,
      aaveDelegationType?: null,
      stkAaveDelegationType?: null
    ): LogDelegateEventFilter;
    LogDelegate(
      delegatee?: null,
      delegateAave?: null,
      delegateStkAave?: null,
      aaveDelegationType?: null,
      stkAaveDelegationType?: null
    ): LogDelegateEventFilter;

    "LogRedeem(uint256,uint256,uint256)"(
      amt?: null,
      getId?: null,
      setId?: null
    ): LogRedeemEventFilter;
    LogRedeem(amt?: null, getId?: null, setId?: null): LogRedeemEventFilter;

    "LogStake(uint256,uint256,uint256)"(
      amt?: null,
      getId?: null,
      setId?: null
    ): LogStakeEventFilter;
    LogStake(amt?: null, getId?: null, setId?: null): LogStakeEventFilter;
  };

  estimateGas: {
    claim(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cooldown(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      delegatee: string,
      delegateAave: boolean,
      delegateStkAave: boolean,
      aaveDelegationType: BigNumberish,
      stkAaveDelegationType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cooldown(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      delegateAave: boolean,
      delegateStkAave: boolean,
      aaveDelegationType: BigNumberish,
      stkAaveDelegationType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
