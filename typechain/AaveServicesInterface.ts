/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AaveServicesInterfaceInterface extends utils.Interface {
  functions: {
    "cancelTask(address)": FunctionFragment;
    "submitTask(address,bytes,bool)": FunctionFragment;
    "taskByUsersAction(address,address)": FunctionFragment;
    "updateTask(address,bytes,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "cancelTask", values: [string]): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "taskByUsersAction",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTask",
    values: [string, BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "cancelTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskByUsersAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTask", data: BytesLike): Result;

  events: {};
}

export interface AaveServicesInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveServicesInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelTask(
      _action: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      _action: string,
      _taskData: BytesLike,
      _isPermanent: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskByUsersAction(
      _user: string,
      _action: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateTask(
      _action: string,
      _data: BytesLike,
      _isPermanent: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelTask(
    _action: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    _action: string,
    _taskData: BytesLike,
    _isPermanent: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskByUsersAction(
    _user: string,
    _action: string,
    overrides?: CallOverrides
  ): Promise<string>;

  updateTask(
    _action: string,
    _data: BytesLike,
    _isPermanent: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelTask(_action: string, overrides?: CallOverrides): Promise<void>;

    submitTask(
      _action: string,
      _taskData: BytesLike,
      _isPermanent: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    taskByUsersAction(
      _user: string,
      _action: string,
      overrides?: CallOverrides
    ): Promise<string>;

    updateTask(
      _action: string,
      _data: BytesLike,
      _isPermanent: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    cancelTask(
      _action: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTask(
      _action: string,
      _taskData: BytesLike,
      _isPermanent: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskByUsersAction(
      _user: string,
      _action: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateTask(
      _action: string,
      _data: BytesLike,
      _isPermanent: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelTask(
      _action: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      _action: string,
      _taskData: BytesLike,
      _isPermanent: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskByUsersAction(
      _user: string,
      _action: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTask(
      _action: string,
      _data: BytesLike,
      _isPermanent: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
