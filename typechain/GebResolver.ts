/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GebResolverInterface extends utils.Interface {
  functions: {
    "borrow(uint256,uint256,uint256,uint256)": FunctionFragment;
    "close(uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "depositAndBorrow(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "exit(uint256,uint256,uint256,uint256)": FunctionFragment;
    "open(string)": FunctionFragment;
    "payback(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdraw(uint256,uint256,uint256,uint256)": FunctionFragment;
    "withdrawLiquidated(uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndBorrow",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "open", values: [string]): string;
  encodeFunctionData(
    functionFragment: "payback",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidated",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payback", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidated",
    data: BytesLike
  ): Result;

  events: {
    "LogBorrow(uint256,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogClose(uint256,bytes32)": EventFragment;
    "LogDeposit(uint256,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogDepositAndBorrow(uint256,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "LogExit(uint256,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogOpen(uint256,bytes32)": EventFragment;
    "LogPayback(uint256,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogTransfer(uint256,bytes32,address)": EventFragment;
    "LogWithdraw(uint256,bytes32,uint256,uint256,uint256)": EventFragment;
    "LogWithdrawLiquidated(uint256,bytes32,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogClose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogDepositAndBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogOpen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPayback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawLiquidated"): EventFragment;
}

export type LogBorrowEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    safe: BigNumber;
    collateralType: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export type LogCloseEvent = TypedEvent<
  [BigNumber, string],
  { safe: BigNumber; collateralType: string }
>;

export type LogCloseEventFilter = TypedEventFilter<LogCloseEvent>;

export type LogDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    safe: BigNumber;
    collateralType: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogDepositEventFilter = TypedEventFilter<LogDepositEvent>;

export type LogDepositAndBorrowEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    safe: BigNumber;
    collateralType: string;
    depositAmt: BigNumber;
    borrowAmt: BigNumber;
    getIdDeposit: BigNumber;
    getIdBorrow: BigNumber;
    setIdDeposit: BigNumber;
    setIdBorrow: BigNumber;
  }
>;

export type LogDepositAndBorrowEventFilter =
  TypedEventFilter<LogDepositAndBorrowEvent>;

export type LogExitEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    safe: BigNumber;
    collateralType: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogExitEventFilter = TypedEventFilter<LogExitEvent>;

export type LogOpenEvent = TypedEvent<
  [BigNumber, string],
  { safe: BigNumber; collateralType: string }
>;

export type LogOpenEventFilter = TypedEventFilter<LogOpenEvent>;

export type LogPaybackEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    safe: BigNumber;
    collateralType: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogPaybackEventFilter = TypedEventFilter<LogPaybackEvent>;

export type LogTransferEvent = TypedEvent<
  [BigNumber, string, string],
  { safe: BigNumber; collateralType: string; newOwner: string }
>;

export type LogTransferEventFilter = TypedEventFilter<LogTransferEvent>;

export type LogWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    safe: BigNumber;
    collateralType: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogWithdrawEventFilter = TypedEventFilter<LogWithdrawEvent>;

export type LogWithdrawLiquidatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    safe: BigNumber;
    collateralType: string;
    tokenAmt: BigNumber;
    getId: BigNumber;
    setId: BigNumber;
  }
>;

export type LogWithdrawLiquidatedEventFilter =
  TypedEventFilter<LogWithdrawLiquidatedEvent>;

export interface GebResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GebResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrow(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      safe: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndBorrow(
      safe: BigNumberish,
      depositAmt: BigNumberish,
      borrowAmt: BigNumberish,
      getIdDeposit: BigNumberish,
      getIdBorrow: BigNumberish,
      setIdDeposit: BigNumberish,
      setIdBorrow: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      colType: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payback(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidated(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrow(
    safe: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    safe: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    safe: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndBorrow(
    safe: BigNumberish,
    depositAmt: BigNumberish,
    borrowAmt: BigNumberish,
    getIdDeposit: BigNumberish,
    getIdBorrow: BigNumberish,
    setIdDeposit: BigNumberish,
    setIdBorrow: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exit(
    safe: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    colType: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payback(
    safe: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    safe: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidated(
    safe: BigNumberish,
    amt: BigNumberish,
    getId: BigNumberish,
    setId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    close(
      safe: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    deposit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    depositAndBorrow(
      safe: BigNumberish,
      depositAmt: BigNumberish,
      borrowAmt: BigNumberish,
      getIdDeposit: BigNumberish,
      getIdBorrow: BigNumberish,
      setIdDeposit: BigNumberish,
      setIdBorrow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    exit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    open(
      colType: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    payback(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    withdraw(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;

    withdrawLiquidated(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { _eventName: string; _eventParam: string }>;
  };

  filters: {
    "LogBorrow(uint256,bytes32,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogBorrowEventFilter;

    "LogClose(uint256,bytes32)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null
    ): LogCloseEventFilter;
    LogClose(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null
    ): LogCloseEventFilter;

    "LogDeposit(uint256,bytes32,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;
    LogDeposit(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogDepositEventFilter;

    "LogDepositAndBorrow(uint256,bytes32,uint256,uint256,uint256,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      depositAmt?: null,
      borrowAmt?: null,
      getIdDeposit?: null,
      getIdBorrow?: null,
      setIdDeposit?: null,
      setIdBorrow?: null
    ): LogDepositAndBorrowEventFilter;
    LogDepositAndBorrow(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      depositAmt?: null,
      borrowAmt?: null,
      getIdDeposit?: null,
      getIdBorrow?: null,
      setIdDeposit?: null,
      setIdBorrow?: null
    ): LogDepositAndBorrowEventFilter;

    "LogExit(uint256,bytes32,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogExitEventFilter;
    LogExit(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogExitEventFilter;

    "LogOpen(uint256,bytes32)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null
    ): LogOpenEventFilter;
    LogOpen(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null
    ): LogOpenEventFilter;

    "LogPayback(uint256,bytes32,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogPaybackEventFilter;
    LogPayback(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogPaybackEventFilter;

    "LogTransfer(uint256,bytes32,address)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      newOwner?: null
    ): LogTransferEventFilter;
    LogTransfer(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      newOwner?: null
    ): LogTransferEventFilter;

    "LogWithdraw(uint256,bytes32,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawEventFilter;
    LogWithdraw(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawEventFilter;

    "LogWithdrawLiquidated(uint256,bytes32,uint256,uint256,uint256)"(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawLiquidatedEventFilter;
    LogWithdrawLiquidated(
      safe?: BigNumberish | null,
      collateralType?: BytesLike | null,
      tokenAmt?: null,
      getId?: null,
      setId?: null
    ): LogWithdrawLiquidatedEventFilter;
  };

  estimateGas: {
    borrow(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      safe: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndBorrow(
      safe: BigNumberish,
      depositAmt: BigNumberish,
      borrowAmt: BigNumberish,
      getIdDeposit: BigNumberish,
      getIdBorrow: BigNumberish,
      setIdDeposit: BigNumberish,
      setIdBorrow: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      colType: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payback(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLiquidated(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      safe: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndBorrow(
      safe: BigNumberish,
      depositAmt: BigNumberish,
      borrowAmt: BigNumberish,
      getIdDeposit: BigNumberish,
      getIdBorrow: BigNumberish,
      setIdDeposit: BigNumberish,
      setIdBorrow: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exit(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      colType: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payback(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidated(
      safe: BigNumberish,
      amt: BigNumberish,
      getId: BigNumberish,
      setId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
