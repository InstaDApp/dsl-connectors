/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaMappingControllerInterface extends utils.Interface {
  functions: {
    "connectors()": FunctionFragment;
    "getRoleMember(address,uint256)": FunctionFragment;
    "getRoleMemberCount(address)": FunctionFragment;
    "grantRole(address,address)": FunctionFragment;
    "hasRole(address,address)": FunctionFragment;
    "instaIndex()": FunctionFragment;
    "renounceRole(address,address)": FunctionFragment;
    "revokeRole(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "connectors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "connectors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;

  events: {
    "RoleGranted(address,address)": EventFragment;
    "RoleRevoked(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type RoleGrantedEvent = TypedEvent<
  [string, string],
  { role: string; account: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface InstaMappingController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaMappingControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    connectors(overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  connectors(overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: string,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    connectors(overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    instaIndex(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RoleGranted(address,address)"(
      role?: string | null,
      account?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: string | null,
      account?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(address,address,address)"(
      role?: string | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: string | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    connectors(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleMember(
      role: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    connectors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleMember(
      role: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: string,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
