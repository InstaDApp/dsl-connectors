/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AaveV1InterfaceInterface extends utils.Interface {
  functions: {
    "borrow(address,uint256,uint256,uint16)": FunctionFragment;
    "deposit(address,uint256,uint16)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "repay(address,uint256,address)": FunctionFragment;
    "setUserUseReserveAsCollateral(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export interface AaveV1Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveV1InterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        currentATokenBalance: BigNumber;
        currentBorrowBalance: BigNumber;
        principalBorrowBalance: BigNumber;
        borrowRateMode: BigNumber;
        borrowRate: BigNumber;
        liquidityRate: BigNumber;
        originationFee: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  borrow(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserReserveData(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      currentATokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
    }
  >;

  redeemUnderlying(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    _aTokenBalanceAfterRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    _reserve: string,
    _amount: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserUseReserveAsCollateral(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        currentATokenBalance: BigNumber;
        currentBorrowBalance: BigNumber;
        principalBorrowBalance: BigNumber;
        borrowRateMode: BigNumber;
        borrowRate: BigNumber;
        liquidityRate: BigNumber;
        originationFee: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
