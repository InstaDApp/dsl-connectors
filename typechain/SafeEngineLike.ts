/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SafeEngineLikeInterface extends utils.Interface {
  functions: {
    "approveSAFEModification(address)": FunctionFragment;
    "coinBalance(address)": FunctionFragment;
    "collateralTypes(bytes32)": FunctionFragment;
    "modifySAFECollateralization(bytes32,address,address,address,int256,int256)": FunctionFragment;
    "safeRights(address,address)": FunctionFragment;
    "safes(bytes32,address)": FunctionFragment;
    "tokenCollateral(bytes32,address)": FunctionFragment;
    "transferInternalCoins(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveSAFEModification",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "coinBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "collateralTypes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifySAFECollateralization",
    values: [BytesLike, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeRights",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safes",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenCollateral",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferInternalCoins",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveSAFEModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "coinBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifySAFECollateralization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeRights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "safes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferInternalCoins",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SafeEngineLike extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeEngineLikeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveSAFEModification(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    coinBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    modifySAFECollateralization(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeRights(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safes(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    tokenCollateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferInternalCoins(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveSAFEModification(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  coinBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  collateralTypes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  modifySAFECollateralization(
    arg0: BytesLike,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeRights(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  safes(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  tokenCollateral(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferInternalCoins(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveSAFEModification(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<void>;

    coinBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    modifySAFECollateralization(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    safeRights(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safes(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    tokenCollateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferInternalCoins(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    approveSAFEModification(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    coinBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifySAFECollateralization(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeRights(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safes(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenCollateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferInternalCoins(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveSAFEModification(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    coinBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralTypes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifySAFECollateralization(
      arg0: BytesLike,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeRights(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safes(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenCollateral(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferInternalCoins(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
