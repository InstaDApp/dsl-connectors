/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InstaPoolFeeInterface extends utils.Interface {
  functions: {
    "changeFee(uint256)": FunctionFragment;
    "changeFeeCollector(address)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "instaIndex()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFeeCollector",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instaIndex",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "instaIndex", data: BytesLike): Result;

  events: {
    "LogChangeFee(uint256)": EventFragment;
    "LogChangeFeeCollector(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogChangeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogChangeFeeCollector"): EventFragment;
}

export type LogChangeFeeEvent = TypedEvent<[BigNumber], { _fee: BigNumber }>;

export type LogChangeFeeEventFilter = TypedEventFilter<LogChangeFeeEvent>;

export type LogChangeFeeCollectorEvent = TypedEvent<
  [string],
  { _feeCollector: string }
>;

export type LogChangeFeeCollectorEventFilter =
  TypedEventFilter<LogChangeFeeCollectorEvent>;

export interface InstaPoolFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstaPoolFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    instaIndex(overrides?: CallOverrides): Promise<[string]>;
  };

  changeFee(
    _fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFeeCollector(
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  instaIndex(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeFee(_fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    changeFeeCollector(
      _feeCollector: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    instaIndex(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogChangeFee(uint256)"(_fee?: null): LogChangeFeeEventFilter;
    LogChangeFee(_fee?: null): LogChangeFeeEventFilter;

    "LogChangeFeeCollector(address)"(
      _feeCollector?: null
    ): LogChangeFeeCollectorEventFilter;
    LogChangeFeeCollector(
      _feeCollector?: null
    ): LogChangeFeeCollectorEventFilter;
  };

  estimateGas: {
    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    instaIndex(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeFee(
      _fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFeeCollector(
      _feeCollector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instaIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
